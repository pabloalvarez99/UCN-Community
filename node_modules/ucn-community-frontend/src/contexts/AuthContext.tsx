import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { User, LoginData, RegisterData, ApiResponse, AuthResponse } from '../types';
import { authAPI } from '../services/api';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  error: string | null;
  token: string | null;
  refreshToken: string | null;
  login: (data: LoginData) => Promise<void>;
  register: (data: RegisterData) => Promise<void>;
  logout: () => Promise<void>;
  updateUser: (userData: Partial<User>) => void;
  clearError: () => void;
  verifyToken: () => Promise<boolean>;
  isAuthenticated: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth debe ser usado dentro de AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [refreshToken, setRefreshToken] = useState<string | null>(null);

  // Verificar token al cargar la aplicación
  useEffect(() => {
    const initAuth = async () => {
      const storedToken = localStorage.getItem('accessToken');
      const storedRefreshToken = localStorage.getItem('refreshToken');
      const storedUser = localStorage.getItem('user');
      
      if (storedToken && storedUser) {
        setToken(storedToken);
        setRefreshToken(storedRefreshToken);
        
        try {
          // Verificar si el token sigue siendo válido
          const isValid = await verifyStoredToken(storedToken);
          if (isValid) {
            setUser(JSON.parse(storedUser));
          } else {
            // Token inválido, limpiar datos
            clearAuthData();
          }
        } catch (err) {
          console.error('Error verificando token:', err);
          clearAuthData();
        }
      }
      setLoading(false);
    };

    initAuth();
  }, []);

  const verifyStoredToken = async (tokenToVerify: string): Promise<boolean> => {
    try {
      const response = await authAPI.verifyToken(tokenToVerify);
      return response.success;
    } catch (error) {
      return false;
    }
  };

  const verifyToken = async (): Promise<boolean> => {
    if (!token) return false;
    return verifyStoredToken(token);
  };

  const clearAuthData = () => {
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('user');
    setToken(null);
    setRefreshToken(null);
    setUser(null);
  };

  const login = async (data: LoginData) => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await authAPI.login(data);
      
      if (response.success && response.data) {
        const { user: userInfo, accessToken, refreshToken: newRefreshToken } = response.data;
        
        // Guardar en localStorage
        localStorage.setItem('accessToken', accessToken);
        localStorage.setItem('refreshToken', newRefreshToken);
        localStorage.setItem('user', JSON.stringify(userInfo));
        
        // Actualizar estado
        setToken(accessToken);
        setRefreshToken(newRefreshToken);
        setUser(userInfo);
        
        console.log('✅ Login exitoso:', userInfo.name);
      } else {
        throw new Error(response.message || 'Error al iniciar sesión');
      }
    } catch (error: any) {
      const errorMessage = error.response?.data?.message || 
                          error.message || 
                          'Error al iniciar sesión';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const register = async (data: RegisterData) => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await authAPI.register(data);
      
      if (response.success && response.data) {
        const { user: userInfo, accessToken, refreshToken: newRefreshToken } = response.data;
        
        // Guardar en localStorage
        localStorage.setItem('accessToken', accessToken);
        localStorage.setItem('refreshToken', newRefreshToken);
        localStorage.setItem('user', JSON.stringify(userInfo));
        
        // Actualizar estado
        setToken(accessToken);
        setRefreshToken(newRefreshToken);
        setUser(userInfo);
        
        console.log('✅ Registro exitoso:', userInfo.name);
      } else {
        throw new Error(response.message || 'Error al registrarse');
      }
    } catch (error: any) {
      const errorMessage = error.response?.data?.message || 
                          error.message || 
                          'Error al registrarse';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    try {
      setLoading(true);
      
      // Llamar al endpoint de logout si existe token
      if (token) {
        try {
          await authAPI.logout();
        } catch (error) {
          // Si falla el logout del servidor, aún así limpiar localmente
          console.warn('Error en logout del servidor:', error);
        }
      }
      
      clearAuthData();
      console.log('✅ Logout exitoso');
    } catch (error) {
      console.error('Error durante logout:', error);
      // Aún así limpiar datos locales
      clearAuthData();
    } finally {
      setLoading(false);
    }
  };

  const updateUser = (userData: Partial<User>) => {
    if (user) {
      const updatedUser = { ...user, ...userData };
      setUser(updatedUser);
      localStorage.setItem('user', JSON.stringify(updatedUser));
    }
  };

  const clearError = () => {
    setError(null);
  };

  const value: AuthContextType = {
    user,
    loading,
    error,
    token,
    refreshToken,
    login,
    register,
    logout,
    updateUser,
    clearError,
    verifyToken,
    isAuthenticated: !!user && !!token,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};