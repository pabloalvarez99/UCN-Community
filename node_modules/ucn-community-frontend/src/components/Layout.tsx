import React, { useState, useRef } from 'react';
import { Outlet, Link, useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { useSocket } from '../contexts/SocketContext';
import { userAPI, retryApiCall } from '../services/api';
import ChatList from './ChatList';
import ChatWindow from './ChatWindow';
import {
  HomeIcon,
  ChatBubbleLeftRightIcon,
  UserIcon,
  DocumentTextIcon,
  Bars3Icon,
  XMarkIcon,
  BellIcon,
  MagnifyingGlassIcon,
  PlusIcon,
  ArrowRightOnRectangleIcon,
  ChevronLeftIcon,
  ChevronRightIcon
} from '@heroicons/react/24/outline';
import {
  HomeIcon as HomeSolid,
  UserIcon as UserSolid,
  DocumentTextIcon as DocumentSolid,
} from '@heroicons/react/24/solid';

interface Chat {
  _id: string;
  id: string;
  nombre: string;
  tipo: 'individual' | 'grupal';
  participantes: Array<{
    id: string;
    name: string;
    carrera: string;
    foto_perfil?: string;
  }>;
  ultimo_mensaje?: {
    contenido: string;
    fecha: string;
    autor?: {
      name: string;
    };
  };
  fecha_creacion: string;
  mensajes_no_leidos: number;
}

const Layout: React.FC = () => {
  const { user, logout } = useAuth();
  const { isConnected, onlineUsers, notifications, unreadCount, markNotificationAsRead, clearAllNotifications, addNotification } = useSocket();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [selectedChat, setSelectedChat] = useState<Chat | null>(null);
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [isChatModalOpen, setIsChatModalOpen] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  const [showUserDropdown, setShowUserDropdown] = useState(false);
  const [showCreatePost, setShowCreatePost] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [showSearchResults, setShowSearchResults] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [postContent, setPostContent] = useState('');
  const [isPublishing, setIsPublishing] = useState(false);
  const searchTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);
  
  const location = useLocation();
  const navigate = useNavigate();

  const handleChatSelect = (chat: Chat) => {
    setSelectedChat(chat);
    if (window.innerWidth < 1024) {
      setIsChatOpen(true);
      setIsChatModalOpen(true);
    }
  };

  const handleChatIconClick = () => {
    setIsChatOpen(!isChatOpen);
    if (window.innerWidth < 1024) {
      setIsChatModalOpen(!isChatModalOpen);
    }
  };

  // Search functionality
  const searchUsers = async (query: string) => {
    if (!query.trim() || query.length < 2) {
      setSearchResults([]);
      setShowSearchResults(false);
      return;
    }

    setIsSearching(true);
    try {
      const response = await retryApiCall(() => userAPI.searchUsers(query));
      if (response.success && response.data) {
        setSearchResults(response.data.users || []);
        setShowSearchResults(true);
      } else {
        setSearchResults([]);
        setShowSearchResults(false);
      }
    } catch (error) {
      console.error('Error searching users:', error);
      setSearchResults([]);
      setShowSearchResults(false);
    } finally {
      setIsSearching(false);
    }
  };

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const query = e.target.value;
    setSearchQuery(query);
    
    // Debounce search
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }
    searchTimeoutRef.current = setTimeout(() => {
      searchUsers(query);
    }, 300);
  };

  const handleSearchKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      if (searchQuery.trim()) {
        navigate(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
        setShowSearchResults(false);
      }
    }
  };

  const handleUserClick = (userId: string) => {
    navigate(`/profile/${userId}`);
    setShowSearchResults(false);
    setSearchQuery('');
  };

  // Create post functionality
  const handleCreatePost = async () => {
    if (!postContent.trim() || postContent.trim().length < 10) {
      return;
    }

    setIsPublishing(true);
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          contenido: postContent.trim()
        })
      });

      if (response.ok) {
        setPostContent('');
        setShowCreatePost(false);
        addNotification({
          type: 'system',
          title: 'Publicación creada',
          message: 'Tu publicación ha sido publicada exitosamente',
          read: false
        });
      } else {
        console.error('Error creating post');
      }
    } catch (error) {
      console.error('Error creating post:', error);
    } finally {
      setIsPublishing(false);
    }
  };

  const handleLogout = async () => {
    try {
      await logout();
      navigate('/login');
      setShowUserDropdown(false);
    } catch (error) {
      console.error('Error durante logout:', error);
    }
  };

  const getAvatarInitials = (name: string) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  };

  return (
    <div className="min-h-screen bg-ucn-gray-50">
      {/* Mobile menu overlay */}
      {isMobileMenuOpen && (
        <div 
          className="fixed inset-0 z-40 bg-black bg-opacity-50 lg:hidden"
          onClick={() => setIsMobileMenuOpen(false)}
        />
      )}

      {/* Header */}
      <header className="bg-white shadow-sm border-b border-ucn-gray-200 sticky top-0 z-30">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* Logo and mobile menu button */}
            <div className="flex items-center">
              <button
                type="button"
                className="lg:hidden p-2 rounded-md text-ucn-gray-600 hover:text-ucn-gray-900 hover:bg-ucn-gray-100 focus:outline-none focus:ring-2 focus:ring-ucn-600"
                onClick={() => setIsMobileMenuOpen(true)}
              >
                <Bars3Icon className="h-6 w-6" />
              </button>
              
              <Link to="/dashboard" className="flex items-center ml-2 lg:ml-0">
                <div className="w-8 h-8 bg-ucn-gradient rounded-lg flex items-center justify-center mr-3">
                  <span className="text-white font-bold text-sm">UCN</span>
                </div>
                <h1 className="text-xl font-display font-bold text-ucn-gray-900 hidden sm:block">
                  Community
                </h1>
              </Link>
            </div>

            {/* Search bar */}
            <div className="hidden md:flex flex-1 max-w-md mx-8">
              <div className="relative w-full">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <MagnifyingGlassIcon className="h-5 w-5 text-ucn-gray-400" />
                </div>
                <input
                  type="text"
                  value={searchQuery}
                  onChange={handleSearchChange}
                  onKeyPress={handleSearchKeyPress}
                  placeholder="Buscar estudiantes UCN..."
                  className="block w-full pl-10 pr-3 py-2 border border-ucn-gray-300 rounded-lg leading-5 bg-white placeholder-ucn-gray-500 focus:outline-none focus:placeholder-ucn-gray-400 focus:ring-2 focus:ring-ucn-600 focus:border-transparent text-sm"
                />
                
                {/* Search Results Dropdown */}
                {showSearchResults && (
                  <>
                    {/* Backdrop */}
                    <div 
                      className="fixed inset-0 z-10" 
                      onClick={() => setShowSearchResults(false)}
                    />
                    
                    {/* Dropdown */}
                    <div className="absolute top-full left-0 right-0 mt-1 bg-white rounded-lg shadow-lg border border-gray-200 z-20 max-h-96 overflow-y-auto">
                      {isSearching ? (
                        <div className="p-4 text-center text-gray-500">
                          <div className="animate-spin inline-block w-4 h-4 border-2 border-gray-300 border-t-ucn-600 rounded-full mr-2"></div>
                          Buscando...
                        </div>
                      ) : searchResults.length === 0 ? (
                        <div className="p-4 text-center text-gray-500">
                          No se encontraron usuarios
                        </div>
                      ) : (
                        searchResults.map((user) => (
                          <div 
                            key={user._id}
                            onClick={() => handleUserClick(user._id)}
                            className="p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0"
                          >
                            <div className="flex items-center space-x-3">
                              <div className="flex-shrink-0">
                                {user.foto_perfil ? (
                                  <img
                                    className="h-8 w-8 rounded-full object-cover"
                                    src={user.foto_perfil}
                                    alt={user.nombre}
                                  />
                                ) : (
                                  <div className="w-8 h-8 bg-ucn-gradient rounded-full flex items-center justify-center">
                                    <span className="text-white font-semibold text-xs">
                                      {getAvatarInitials(`${user.nombre} ${user.apellidos}`)}
                                    </span>
                                  </div>
                                )}
                              </div>
                              <div className="flex-1">
                                <p className="text-sm font-medium text-gray-900">
                                  {user.nombre} {user.apellidos}
                                </p>
                                <p className="text-xs text-gray-500">
                                  {user.carrera}
                                </p>
                              </div>
                            </div>
                          </div>
                        ))
                      )}
                    </div>
                  </>
                )}
              </div>
            </div>

            {/* Right side actions */}
            <div className="flex items-center space-x-4">
              {/* Chat button */}
              <button 
                onClick={handleChatIconClick}
                className="relative p-2 text-ucn-gray-600 hover:text-ucn-gray-900 hover:bg-ucn-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-ucn-600"
                title="Chat"
              >
                <ChatBubbleLeftRightIcon className="h-6 w-6" />
                <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-blue-500 transform translate-x-1 -translate-y-1"></span>
              </button>

              {/* Create post button */}
              <button 
                onClick={() => setShowCreatePost(true)}
                className="hidden sm:inline-flex btn-primary px-4 py-2 text-sm"
              >
                <PlusIcon className="h-4 w-4 mr-2" />
                Crear
              </button>

              {/* Notifications */}
              <div className="relative">
                <button 
                  onClick={() => {
                    setShowNotifications(!showNotifications);
                    if (!showNotifications && unreadCount > 0) {
                      // Mark all notifications as read when opening
                      setTimeout(() => {
                        notifications.forEach(notification => {
                          if (!notification.read) {
                            markNotificationAsRead(notification.id);
                          }
                        });
                      }, 500);
                    }
                  }}
                  className="relative p-2 text-ucn-gray-600 hover:text-ucn-gray-900 hover:bg-ucn-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-ucn-600"
                >
                  <BellIcon className="h-6 w-6" />
                  {unreadCount > 0 && (
                    <span className="absolute -top-1 -right-1 px-1.5 py-0.5 text-xs font-medium bg-red-500 text-white rounded-full min-w-[18px] h-[18px] flex items-center justify-center">
                      {unreadCount > 9 ? '9+' : unreadCount}
                    </span>
                  )}
                </button>
                
                {/* Notifications Dropdown */}
                {showNotifications && (
                  <>
                    {/* Backdrop */}
                    <div 
                      className="fixed inset-0 z-10" 
                      onClick={() => setShowNotifications(false)}
                    />
                    
                    {/* Dropdown */}
                    <div className="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-20">
                      <div className="p-4 border-b border-gray-200 flex justify-between items-center">
                        <h3 className="text-lg font-semibold text-gray-900">Notificaciones</h3>
                        {notifications.length > 0 && (
                          <button
                            onClick={clearAllNotifications}
                            className="text-sm text-ucn-600 hover:text-ucn-700"
                          >
                            Limpiar todo
                          </button>
                        )}
                      </div>
                      
                      <div className="max-h-96 overflow-y-auto">
                        {notifications.length === 0 ? (
                          <div className="p-6 text-center text-gray-500">
                            <BellIcon className="h-12 w-12 mx-auto text-gray-300 mb-3" />
                            <p className="text-sm font-medium">No tienes notificaciones nuevas</p>
                            <p className="text-xs text-gray-400 mt-1">Te avisaremos cuando tengas algo nuevo</p>
                          </div>
                        ) : (
                          notifications.map((notification) => (
                            <div 
                              key={notification.id}
                              className={`p-3 hover:bg-gray-50 border-b border-gray-100 cursor-pointer ${
                                !notification.read ? 'bg-blue-50' : ''
                              }`}
                              onClick={() => markNotificationAsRead(notification.id)}
                            >
                              <div className="flex items-start space-x-3">
                                <div className="flex-shrink-0">
                                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                                    notification.type === 'user_online' ? 'bg-green-100' :
                                    notification.type === 'message' ? 'bg-blue-100' :
                                    'bg-gray-100'
                                  }`}>
                                    <BellIcon className={`h-4 w-4 ${
                                      notification.type === 'user_online' ? 'text-green-600' :
                                      notification.type === 'message' ? 'text-blue-600' :
                                      'text-gray-600'
                                    }`} />
                                  </div>
                                </div>
                                <div className="flex-1">
                                  <p className="text-sm text-gray-900">{notification.title}</p>
                                  <p className="text-xs text-gray-500 mt-1">{notification.message}</p>
                                  <p className="text-xs text-gray-400 mt-1">
                                    {new Date(notification.timestamp).toLocaleString('es-ES', {
                                      hour: '2-digit',
                                      minute: '2-digit',
                                      day: '2-digit',
                                      month: '2-digit'
                                    })}
                                  </p>
                                </div>
                                {!notification.read && (
                                  <div className="w-2 h-2 bg-blue-500 rounded-full flex-shrink-0"></div>
                                )}
                              </div>
                            </div>
                          ))
                        )}
                      </div>
                    </div>
                  </>
                )}
              </div>

              {/* Connection status */}
              <div className="flex items-center space-x-2">
                <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
                <span className="text-xs text-ucn-gray-500 hidden sm:inline">
                  {isConnected ? 'Conectado' : 'Desconectado'}
                </span>
              </div>

              {/* User menu */}
              <div className="relative">
                <button 
                  onClick={() => setShowUserDropdown(!showUserDropdown)}
                  className="flex items-center space-x-2 p-2 rounded-lg hover:bg-ucn-gray-100 transition-colors focus:outline-none focus:ring-2 focus:ring-ucn-600"
                >
                  {user?.foto_perfil ? (
                    <img
                      className="h-8 w-8 rounded-full object-cover"
                      src={user.foto_perfil}
                      alt={user.name}
                    />
                  ) : (
                    <div className="avatar-sm">
                      {getAvatarInitials(user?.name || '')}
                    </div>
                  )}
                  <span className="hidden sm:block text-sm font-medium text-ucn-gray-700">
                    {user?.name}
                  </span>
                  <ChevronRightIcon className="h-4 w-4 text-ucn-gray-400 transform transition-transform duration-200 rotate-90" />
                </button>

                {/* User Dropdown */}
                {showUserDropdown && (
                  <>
                    {/* Backdrop */}
                    <div 
                      className="fixed inset-0 z-10" 
                      onClick={() => setShowUserDropdown(false)}
                    />
                    
                    {/* Dropdown */}
                    <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-20">
                      <div className="p-3 border-b border-gray-200">
                        <div className="flex items-center space-x-3">
                          {user?.foto_perfil ? (
                            <img
                              className="h-10 w-10 rounded-full object-cover"
                              src={user.foto_perfil}
                              alt={user.name}
                            />
                          ) : (
                            <div className="w-10 h-10 bg-ucn-gradient rounded-full flex items-center justify-center">
                              <span className="text-white font-semibold text-sm">
                                {user ? getAvatarInitials(user.name) : 'U'}
                              </span>
                            </div>
                          )}
                          <div>
                            <p className="text-sm font-medium text-gray-900">
                              {user?.name || 'Usuario'}
                            </p>
                            <p className="text-xs text-gray-500">
                              {user?.email}
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="py-1">
                        <button
                          onClick={() => {
                            navigate('/profile');
                            setShowUserDropdown(false);
                          }}
                          className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                        >
                          <UserIcon className="h-4 w-4 mr-3 text-gray-400" />
                          Ver mi perfil
                        </button>
                        
                        <button
                          onClick={() => {
                            navigate('/settings');
                            setShowUserDropdown(false);
                          }}
                          className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                        >
                          <svg className="h-4 w-4 mr-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                          </svg>
                          Configuración
                        </button>
                        
                        <div className="border-t border-gray-200"></div>
                        
                        <button
                          onClick={handleLogout}
                          className="w-full flex items-center px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                        >
                          <ArrowRightOnRectangleIcon className="h-4 w-4 mr-3 text-red-500" />
                          Cerrar sesión
                        </button>
                      </div>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar Navigation */}
        <nav className="hidden lg:flex lg:flex-col lg:w-64 lg:fixed lg:inset-y-0 lg:pt-16 lg:bg-white lg:border-r lg:border-ucn-gray-200">
          <div className="flex-1 flex flex-col min-h-0">
            <div className="flex-1 flex flex-col pt-5 pb-4 overflow-y-auto">
              <nav className="mt-5 flex-1 px-3 space-y-1">
                <Link
                  to="/dashboard"
                  className={`flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
                    location.pathname === '/dashboard'
                      ? 'bg-ucn-100 text-ucn-700'
                      : 'text-ucn-gray-600 hover:bg-ucn-gray-50 hover:text-ucn-gray-900'
                  }`}
                >
                  {location.pathname === '/dashboard' ? (
                    <HomeSolid className="mr-3 h-6 w-6" />
                  ) : (
                    <HomeIcon className="mr-3 h-6 w-6" />
                  )}
                  Inicio
                </Link>

                <Link
                  to="/posts"
                  className={`flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
                    location.pathname.startsWith('/posts')
                      ? 'bg-ucn-100 text-ucn-700'
                      : 'text-ucn-gray-600 hover:bg-ucn-gray-50 hover:text-ucn-gray-900'
                  }`}
                >
                  {location.pathname.startsWith('/posts') ? (
                    <DocumentSolid className="mr-3 h-6 w-6" />
                  ) : (
                    <DocumentTextIcon className="mr-3 h-6 w-6" />
                  )}
                  Publicaciones
                </Link>

                <Link
                  to="/profile"
                  className={`flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
                    location.pathname === '/profile'
                      ? 'bg-ucn-100 text-ucn-700'
                      : 'text-ucn-gray-600 hover:bg-ucn-gray-50 hover:text-ucn-gray-900'
                  }`}
                >
                  {location.pathname === '/profile' ? (
                    <UserSolid className="mr-3 h-6 w-6" />
                  ) : (
                    <UserIcon className="mr-3 h-6 w-6" />
                  )}
                  Mi Perfil
                </Link>
              </nav>

              {/* Online users section */}
              <div className="mt-8 px-3">
                <h3 className="text-xs font-semibold text-ucn-gray-400 uppercase tracking-wider mb-3">
                  Usuarios conectados ({onlineUsers.length})
                </h3>
                <div className="space-y-2 max-h-64 overflow-y-auto">
                  {onlineUsers.slice(0, 10).map((onlineUser, index) => (
                    <Link
                      key={`${onlineUser.userId}-${index}`}
                      to={`/profile/${onlineUser.userId}`}
                      className="flex items-center space-x-2 p-2 rounded-lg hover:bg-ucn-gray-50 transition-colors"
                    >
                      <div className="w-8 h-8 bg-ucn-gradient rounded-full flex items-center justify-center">
                        <span className="text-white font-semibold text-xs">
                          {getAvatarInitials(onlineUser.name)}
                        </span>
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium text-ucn-gray-900 truncate">
                          {onlineUser.name}
                        </p>
                        <div className="flex items-center">
                          <div className="w-2 h-2 bg-green-500 rounded-full mr-1"></div>
                          <span className="text-xs text-ucn-gray-500">En línea</span>
                        </div>
                      </div>
                    </Link>
                  ))}
                  {onlineUsers.length > 10 && (
                    <Link
                      to="/users"
                      className="block px-3 py-2 text-xs text-ucn-600 hover:text-ucn-700"
                    >
                      Ver todos ({onlineUsers.length})
                    </Link>
                  )}
                </div>
              </div>
            </div>
          </div>
        </nav>

        {/* Mobile sidebar */}
        <nav className={`lg:hidden fixed inset-y-0 left-0 z-50 w-64 bg-white border-r border-ucn-gray-200 transform transition-transform duration-300 ease-in-out ${
          isMobileMenuOpen ? 'translate-x-0' : '-translate-x-full'
        }`}>
          <div className="flex items-center justify-between p-4 border-b border-ucn-gray-200">
            <div className="flex items-center">
              <div className="w-8 h-8 bg-ucn-gradient rounded-lg flex items-center justify-center mr-3">
                <span className="text-white font-bold text-sm">UCN</span>
              </div>
              <h1 className="text-xl font-display font-bold text-ucn-gray-900">
                Community
              </h1>
            </div>
            <button
              type="button"
              className="p-2 rounded-md text-ucn-gray-600 hover:text-ucn-gray-900 hover:bg-ucn-gray-100 focus:outline-none focus:ring-2 focus:ring-ucn-600"
              onClick={() => setIsMobileMenuOpen(false)}
            >
              <XMarkIcon className="h-6 w-6" />
            </button>
          </div>

          <div className="flex-1 flex flex-col overflow-y-auto">
            <nav className="mt-5 flex-1 px-3 space-y-1">
              <Link
                to="/dashboard"
                className={`flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
                  location.pathname === '/dashboard'
                    ? 'bg-ucn-100 text-ucn-700'
                    : 'text-ucn-gray-600 hover:bg-ucn-gray-50 hover:text-ucn-gray-900'
                }`}
                onClick={() => setIsMobileMenuOpen(false)}
              >
                {location.pathname === '/dashboard' ? (
                  <HomeSolid className="mr-3 h-6 w-6" />
                ) : (
                  <HomeIcon className="mr-3 h-6 w-6" />
                )}
                Inicio
              </Link>

              <Link
                to="/posts"
                className={`flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
                  location.pathname.startsWith('/posts')
                    ? 'bg-ucn-100 text-ucn-700'
                    : 'text-ucn-gray-600 hover:bg-ucn-gray-50 hover:text-ucn-gray-900'
                }`}
                onClick={() => setIsMobileMenuOpen(false)}
              >
                {location.pathname.startsWith('/posts') ? (
                  <DocumentSolid className="mr-3 h-6 w-6" />
                ) : (
                  <DocumentTextIcon className="mr-3 h-6 w-6" />
                )}
                Publicaciones
              </Link>

              <Link
                to="/profile"
                className={`flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors ${
                  location.pathname === '/profile'
                    ? 'bg-ucn-100 text-ucn-700'
                    : 'text-ucn-gray-600 hover:bg-ucn-gray-50 hover:text-ucn-gray-900'
                }`}
                onClick={() => setIsMobileMenuOpen(false)}
              >
                {location.pathname === '/profile' ? (
                  <UserSolid className="mr-3 h-6 w-6" />
                ) : (
                  <UserIcon className="mr-3 h-6 w-6" />
                )}
                Mi Perfil
              </Link>
            </nav>
          </div>
        </nav>

        {/* Main content */}
        <main className="flex-1 lg:pl-64">
          <div className="py-6">
            <Outlet />
          </div>
        </main>

        {/* Chat overlay */}
        <div className={`fixed inset-0 z-50 lg:static lg:inset-auto transition-transform duration-300 ease-in-out ${
          isChatOpen ? 'translate-x-0' : 'translate-x-full lg:translate-x-0'
        }`}>
          <div className={`h-full lg:w-80 bg-white border-l border-ucn-gray-200 flex flex-col ${
            isChatOpen ? 'w-full' : 'lg:w-80'
          }`}>
            <div className="lg:hidden flex items-center justify-between p-4 border-b border-ucn-gray-200">
              <h2 className="text-lg font-semibold">Chat</h2>
              <button
                onClick={() => setIsChatOpen(false)}
                className="p-2 rounded-md text-ucn-gray-600 hover:text-ucn-gray-900 hover:bg-ucn-gray-100"
              >
                <XMarkIcon className="h-6 w-6" />
              </button>
            </div>
            <div className="flex-1 flex flex-col overflow-hidden">
              {!selectedChat && <ChatList onChatSelect={handleChatSelect} />}
              {selectedChat && isChatModalOpen && (
                <>
                  <div className="lg:hidden flex items-center justify-between p-4 border-b border-ucn-gray-200">
                    <button
                      onClick={() => {
                        setSelectedChat(null);
                        setIsChatModalOpen(false);
                      }}
                      className="p-2 rounded-md text-ucn-gray-600 hover:text-ucn-gray-900 hover:bg-ucn-gray-100"
                    >
                      <ChevronLeftIcon className="h-6 w-6" />
                    </button>
                    <h2 className="text-lg font-semibold truncate">{selectedChat.nombre}</h2>
                    <button
                      onClick={() => setIsChatOpen(false)}
                      className="p-2 rounded-md text-ucn-gray-600 hover:text-ucn-gray-900 hover:bg-ucn-gray-100"
                    >
                      <XMarkIcon className="h-6 w-6" />
                    </button>
                  </div>
                  <div className="flex-1">
                    <ChatWindow chat={selectedChat} />
                  </div>
                </>
              )}
            </div>
          </div>
        </div>

      </div>

      {/* Create Post Modal */}
      {showCreatePost && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen p-4">
            {/* Backdrop */}
            <div 
              className="fixed inset-0 bg-black bg-opacity-50"
              onClick={() => setShowCreatePost(false)}
            />
            
            {/* Modal */}
            <div className="relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">
                  Crear nueva publicación
                </h3>
                <button
                  onClick={() => setShowCreatePost(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>
              
              {/* Content */}
              <div className="p-4">
                <div className="flex items-start space-x-3 mb-4">
                  <div className="flex-shrink-0">
                    {user?.foto_perfil ? (
                      <img
                        className="h-10 w-10 rounded-full object-cover"
                        src={user.foto_perfil}
                        alt={user.name}
                      />
                    ) : (
                      <div className="w-10 h-10 bg-ucn-gradient rounded-full flex items-center justify-center">
                        <span className="text-white font-semibold text-sm">
                          {user ? getAvatarInitials(user.name) : 'U'}
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium text-gray-900">
                      {user?.name || 'Usuario'}
                    </p>
                  </div>
                </div>
                
                <textarea
                  value={postContent}
                  onChange={(e) => setPostContent(e.target.value)}
                  placeholder="¿Qué quieres compartir con la comunidad UCN?"
                  className="w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-ucn-600 focus:border-transparent"
                  rows={4}
                  maxLength={500}
                />
                
                <div className="flex items-center justify-between mt-3">
                  <span className="text-xs text-gray-500">
                    {postContent.length}/500 caracteres
                    {postContent.trim().length > 0 && postContent.trim().length < 10 && (
                      <span className="text-red-500 ml-2">
                        Mínimo 10 caracteres
                      </span>
                    )}
                  </span>
                </div>
              </div>
              
              {/* Footer */}
              <div className="flex items-center justify-end space-x-3 p-4 border-t border-gray-200">
                <button
                  onClick={() => setShowCreatePost(false)}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-ucn-600"
                >
                  Cancelar
                </button>
                <button
                  onClick={handleCreatePost}
                  disabled={!postContent.trim() || postContent.trim().length < 10 || isPublishing}
                  className="px-4 py-2 text-sm font-medium text-white bg-ucn-600 border border-transparent rounded-md hover:bg-ucn-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-ucn-600 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isPublishing ? (
                    <>
                      <div className="animate-spin inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                      Publicando...
                    </>
                  ) : (
                    'Publicar'
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Layout;