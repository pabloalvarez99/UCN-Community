import React, { useState, useEffect } from 'react';
import { PlusIcon, MagnifyingGlassIcon, UserIcon } from '@heroicons/react/24/outline';
import { ChatBubbleLeftIcon } from '@heroicons/react/24/solid';
import { useAuth } from '../contexts/AuthContext';
import UserSearch from './UserSearch';
import api from '../services/api';

interface Chat {
  _id: string;
  id: string;
  nombre: string;
  tipo: 'individual' | 'grupal';
  participantes: Array<{
    id: string;
    name: string;
    carrera: string;
    foto_perfil?: string;
  }>;
  ultimo_mensaje?: {
    contenido: string;
    fecha: string;
    autor?: {
      name: string;
    };
  };
  fecha_creacion: string;
  mensajes_no_leidos: number;
}

interface User {
  id: string;
  _id: string;
  name: string;
  email: string;
  carrera: string;
  campus: string;
  año_ingreso: number;
  foto_perfil?: string;
  role: string;
  verificado: boolean;
}

interface ChatListProps {
  onChatSelect: (chat: Chat) => void;
  selectedChatId?: string;
  onNewChat?: () => void;
}

const ChatList: React.FC<ChatListProps> = ({
  onChatSelect,
  selectedChatId,
  onNewChat
}) => {
  const [chats, setChats] = useState<Chat[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [showUserSearch, setShowUserSearch] = useState(false);
  const { token } = useAuth();

  useEffect(() => {
    loadChats();
  }, [token]);

  const loadChats = async () => {
    if (!token) {
      setError('No hay token de autenticación');
      setLoading(false);
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await api.get('/chat', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.data.success) {
        setChats(response.data.data.chats || []);
      } else {
        setError(response.data.message || 'Error cargando chats');
      }
    } catch (err: any) {
      console.error('Error loading chats:', err);
      if (err.response?.status === 401) {
        setError('No tienes autorización para ver los chats');
      } else if (err.response?.status === 404) {
        setChats([]); // No chats found, it's ok
      } else {
        setError('Error conectando con el servidor');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCreateChat = async (userId: string) => {
    if (!token) {
      setError('No hay token de autenticación');
      return;
    }

    try {
      const response = await api.post('/chat', {
        userId: userId
      }, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.data.success) {
        const newChat = response.data.data.chat;
        
        // Add to chat list or update existing
        setChats(prevChats => {
          const existingIndex = prevChats.findIndex(chat => 
            (chat._id || chat.id) === (newChat._id || newChat.id)
          );
          
          if (existingIndex >= 0) {
            // Chat already exists, select it
            onChatSelect(prevChats[existingIndex]);
            return prevChats;
          } else {
            // New chat created
            const updatedChats = [newChat, ...prevChats];
            onChatSelect(newChat);
            return updatedChats;
          }
        });
      } else {
        setError(response.data.message || 'Error creando chat');
      }
    } catch (err: any) {
      console.error('Error creating chat:', err);
      setError(err.response?.data?.message || 'Error creando chat');
    }
  };

  const handleUserSelect = (user: User) => {
    console.log('Usuario seleccionado:', user);
  };

  const formatLastMessageTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));

    if (minutes < 1) return 'Ahora';
    if (minutes < 60) return `${minutes}m`;
    if (hours < 24) return `${hours}h`;
    if (days < 7) return `${days}d`;
    return date.toLocaleDateString();
  };

  const filteredChats = chats.filter(chat =>
    chat.nombre.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="h-full flex flex-col bg-white border-r border-gray-200">
      {/* Header */}
      <div className="p-4 border-b border-gray-200 bg-white">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-gray-900">Chats</h2>
          <button
            onClick={() => setShowUserSearch(true)}
            className="p-2 text-blue-600 hover:bg-blue-50 rounded-full transition-colors"
            title="Nuevo chat"
          >
            <PlusIcon className="h-6 w-6" />
          </button>
        </div>

        {/* Search input */}
        <div className="relative">
          <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="Buscar conversaciones..."
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm"
          />
        </div>
      </div>

      {/* Chat list */}
      <div className="flex-1 overflow-y-auto">
        {loading && (
          <div className="flex items-center justify-center p-8">
            <div className="animate-spin rounded-full h-8 w-8 border-2 border-blue-600 border-t-transparent"></div>
            <span className="ml-3 text-gray-600">Cargando chats...</span>
          </div>
        )}

        {error && (
          <div className="p-4 text-center">
            <p className="text-red-600 text-sm">{error}</p>
            <button
              onClick={loadChats}
              className="mt-2 text-blue-600 hover:text-blue-800 text-sm"
            >
              Reintentar
            </button>
          </div>
        )}

        {!loading && !error && filteredChats.length === 0 && (
          <div className="flex flex-col items-center justify-center p-8 text-gray-500">
            <ChatBubbleLeftIcon className="h-12 w-12 mb-3 text-gray-300" />
            {searchQuery ? (
              <>
                <p>No se encontraron chats</p>
                <p className="text-sm">Intenta con otro término</p>
              </>
            ) : (
              <>
                <p>No tienes conversaciones</p>
                <p className="text-sm">Busca usuarios para empezar a chatear</p>
                <button
                  onClick={() => setShowUserSearch(true)}
                  className="mt-3 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
                >
                  Buscar usuarios
                </button>
              </>
            )}
          </div>
        )}

        {!loading && !error && filteredChats.map((chat) => {
          const isSelected = selectedChatId === (chat._id || chat.id);
          
          return (
            <div
              key={chat._id || chat.id}
              onClick={() => onChatSelect(chat)}
              className={`p-4 border-b border-gray-100 cursor-pointer transition-colors ${
                isSelected ? 'bg-blue-50 border-l-4 border-l-blue-600' : 'hover:bg-gray-50'
              }`}
            >
              <div className="flex items-center">
                {/* Avatar */}
                <div className="flex-shrink-0">
                  {chat.tipo === 'individual' && chat.participantes.length > 0 ? (
                    chat.participantes[0].foto_perfil ? (
                      <img
                        src={chat.participantes[0].foto_perfil}
                        alt={chat.nombre}
                        className="h-12 w-12 rounded-full object-cover"
                      />
                    ) : (
                      <div className="h-12 w-12 bg-gray-200 rounded-full flex items-center justify-center">
                        <UserIcon className="h-6 w-6 text-gray-500" />
                      </div>
                    )
                  ) : (
                    <div className="h-12 w-12 bg-blue-100 rounded-full flex items-center justify-center">
                      <ChatBubbleLeftIcon className="h-6 w-6 text-blue-600" />
                    </div>
                  )}
                </div>

                {/* Chat info */}
                <div className="ml-3 flex-1 min-w-0">
                  <div className="flex items-center justify-between">
                    <h3 className="text-sm font-medium text-gray-900 truncate">
                      {chat.nombre}
                    </h3>
                    {chat.ultimo_mensaje && (
                      <span className="text-xs text-gray-500 flex-shrink-0 ml-2">
                        {formatLastMessageTime(chat.ultimo_mensaje.fecha)}
                      </span>
                    )}
                  </div>

                  {/* Last message */}
                  <div className="flex items-center justify-between mt-1">
                    <p className="text-sm text-gray-600 truncate flex-1">
                      {chat.ultimo_mensaje ? (
                        <>
                          {chat.ultimo_mensaje.autor && chat.tipo === 'grupal' && (
                            <span className="font-medium">
                              {chat.ultimo_mensaje.autor.name}: 
                            </span>
                          )}
                          {chat.ultimo_mensaje.contenido}
                        </>
                      ) : (
                        <span className="italic">Sin mensajes</span>
                      )}
                    </p>
                    
                    {/* Unread badge */}
                    {chat.mensajes_no_leidos > 0 && (
                      <span className="ml-2 bg-blue-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center flex-shrink-0">
                        {chat.mensajes_no_leidos > 99 ? '99+' : chat.mensajes_no_leidos}
                      </span>
                    )}
                  </div>

                  {/* User info for individual chats */}
                  {chat.tipo === 'individual' && chat.participantes.length > 0 && (
                    <p className="text-xs text-gray-400 mt-1 truncate">
                      {chat.participantes[0].carrera}
                    </p>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* User search modal */}
      <UserSearch
        isOpen={showUserSearch}
        onClose={() => setShowUserSearch(false)}
        onUserSelect={handleUserSelect}
        onCreateChat={handleCreateChat}
      />
    </div>
  );
};

export default ChatList;