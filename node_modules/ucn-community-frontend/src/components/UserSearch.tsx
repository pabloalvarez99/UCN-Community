import React, { useState, useEffect, useCallback } from 'react';
import { MagnifyingGlassIcon, UserIcon, AcademicCapIcon } from '@heroicons/react/24/outline';
import { XMarkIcon } from '@heroicons/react/24/solid';
import { useAuth } from '../contexts/AuthContext';
import api from '../services/api';

interface User {
  id: string;
  _id: string;
  name: string;
  email: string;
  carrera: string;
  campus: string;
  año_ingreso: number;
  foto_perfil?: string;
  role: string;
  verificado: boolean;
}

interface UserSearchProps {
  isOpen: boolean;
  onClose: () => void;
  onUserSelect: (user: User) => void;
  onCreateChat: (userId: string) => void;
}

const UserSearch: React.FC<UserSearchProps> = ({
  isOpen,
  onClose,
  onUserSelect,
  onCreateChat
}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { token } = useAuth();

  const searchUsers = useCallback(async (query: string) => {
    if (!query || query.trim().length < 2) {
      setSearchResults([]);
      return;
    }

    if (!token) {
      setError('No tienes autorización para buscar usuarios');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await api.get(`/users/search/${encodeURIComponent(query.trim())}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        },
        params: {
          limit: 20
        }
      });

      if (response.data.success) {
        setSearchResults(response.data.data.users || []);
      } else {
        setError(response.data.message || 'Error buscando usuarios');
        setSearchResults([]);
      }
    } catch (err: any) {
      console.error('Error searching users:', err);
      if (err.response?.status === 401) {
        setError('No tienes autorización para buscar usuarios');
      } else if (err.response?.status === 400) {
        setError('La búsqueda debe tener al menos 2 caracteres');
      } else {
        setError('Error conectando con el servidor');
      }
      setSearchResults([]);
    } finally {
      setLoading(false);
    }
  }, [token]);

  useEffect(() => {
    const debounceTimer = setTimeout(() => {
      if (searchQuery.trim()) {
        searchUsers(searchQuery);
      } else {
        setSearchResults([]);
      }
    }, 300);

    return () => clearTimeout(debounceTimer);
  }, [searchQuery, searchUsers]);

  const handleUserClick = (user: User) => {
    onUserSelect(user);
    onCreateChat(user.id || user._id);
    handleClose();
  };

  const handleClose = () => {
    setSearchQuery('');
    setSearchResults([]);
    setError(null);
    onClose();
  };

  const getRoleDisplayName = (role: string) => {
    switch (role) {
      case 'student': return 'Estudiante';
      case 'professor': return 'Profesor';
      case 'admin': return 'Administrador';
      default: return role;
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl w-full max-w-md max-h-[80vh] flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">
            Buscar Usuarios UCN
          </h3>
          <button
            onClick={handleClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <XMarkIcon className="h-6 w-6" />
          </button>
        </div>

        {/* Search input */}
        <div className="p-4 border-b border-gray-200">
          <div className="relative">
            <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Buscar por nombre o email..."
              className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
              autoFocus
            />
          </div>
          
          {error && (
            <p className="text-red-600 text-sm mt-2">{error}</p>
          )}
        </div>

        {/* Search results */}
        <div className="flex-1 overflow-y-auto">
          {loading && (
            <div className="flex items-center justify-center p-8">
              <div className="animate-spin rounded-full h-8 w-8 border-2 border-blue-600 border-t-transparent"></div>
              <span className="ml-3 text-gray-600">Buscando usuarios...</span>
            </div>
          )}

          {!loading && searchQuery.trim() && searchResults.length === 0 && !error && (
            <div className="flex flex-col items-center justify-center p-8 text-gray-500">
              <UserIcon className="h-12 w-12 mb-3 text-gray-300" />
              <p>No se encontraron usuarios</p>
              <p className="text-sm">Intenta con otro nombre o email</p>
            </div>
          )}

          {!loading && searchResults.length > 0 && (
            <div className="p-2">
              {searchResults.map((user) => (
                <div
                  key={user.id || user._id}
                  onClick={() => handleUserClick(user)}
                  className="flex items-center p-3 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors"
                >
                  {/* Avatar */}
                  <div className="flex-shrink-0">
                    {user.foto_perfil ? (
                      <img
                        src={user.foto_perfil}
                        alt={user.name}
                        className="h-12 w-12 rounded-full object-cover"
                      />
                    ) : (
                      <div className="h-12 w-12 bg-gray-200 rounded-full flex items-center justify-center">
                        <UserIcon className="h-6 w-6 text-gray-500" />
                      </div>
                    )}
                  </div>

                  {/* User info */}
                  <div className="ml-3 flex-1 min-w-0">
                    <div className="flex items-center">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {user.name}
                      </p>
                      {user.verificado && (
                        <span className="ml-1 text-blue-500">
                          ✓
                        </span>
                      )}
                    </div>
                    
                    <div className="flex items-center text-xs text-gray-500 mt-1">
                      <AcademicCapIcon className="h-3 w-3 mr-1" />
                      <span className="truncate">{user.carrera}</span>
                    </div>
                    
                    <div className="flex items-center justify-between text-xs text-gray-400 mt-1">
                      <span>{user.campus} • {user.año_ingreso}</span>
                      <span className="capitalize">{getRoleDisplayName(user.role)}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {!searchQuery.trim() && (
            <div className="flex flex-col items-center justify-center p-8 text-gray-500">
              <MagnifyingGlassIcon className="h-12 w-12 mb-3 text-gray-300" />
              <p>Busca estudiantes y profesores UCN</p>
              <p className="text-sm">Escribe al menos 2 caracteres para buscar</p>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-gray-200 bg-gray-50">
          <p className="text-xs text-gray-500 text-center">
            Solo usuarios verificados de UCN aparecen en los resultados
          </p>
        </div>
      </div>
    </div>
  );
};

export default UserSearch;