import React from 'react';

interface MessageAuthor {
  id: string;
  name: string;
  foto_perfil?: string | null;
  carrera?: string;
}

interface MessageBubbleMessage {
  id?: string;
  _id?: string;
  contenido?: string;
  content?: string;
  autor?: MessageAuthor;
  sender?: MessageAuthor;
  fecha_envio?: string | Date;
  createdAt?: string | Date;
  tipo?: string;
  messageType?: string;
  leido?: boolean;
  is_read?: boolean;
  is_own?: boolean;
}

interface MessageBubbleProps {
  message: MessageBubbleMessage;
  isOwnMessage: boolean;
  showTimestamp?: boolean;
}

const MessageBubble: React.FC<MessageBubbleProps> = ({ 
  message, 
  isOwnMessage, 
  showTimestamp = true 
}) => {
  const formatTimestamp = (date: string | Date) => {
    const messageDate = new Date(date);
    const now = new Date();
    const diff = now.getTime() - messageDate.getTime();
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));

    if (minutes < 1) return 'Ahora';
    if (minutes < 60) return `${minutes}m`;
    if (hours < 24) return `${hours}h`;
    if (days < 7) return `${days}d`;
    return messageDate.toLocaleDateString();
  };

  return (
    <div className={`flex mb-3 ${isOwnMessage ? 'justify-end' : 'justify-start'}`}>
      <div className="flex flex-col max-w-xs lg:max-w-md">
        {/* Author name for received messages */}
        {!isOwnMessage && message.autor && (
          <span className="text-xs text-gray-500 mb-1 px-2">
            {message.autor.name}
          </span>
        )}
        
        {/* Message bubble */}
        <div
          className={`px-4 py-3 rounded-2xl shadow-sm ${
            isOwnMessage
              ? 'bg-blue-600 text-white rounded-br-sm'
              : 'bg-white text-gray-800 border border-gray-200 rounded-bl-sm'
          }`}
        >
          <p className="text-sm leading-relaxed break-words">
            {message.contenido || message.content}
          </p>
          
          {/* Timestamp */}
          {showTimestamp && (
            <div className={`flex items-center mt-2 ${isOwnMessage ? 'justify-end' : 'justify-start'}`}>
              <span
                className={`text-xs ${
                  isOwnMessage ? 'text-blue-100' : 'text-gray-400'
                }`}
              >
                {formatTimestamp(message.fecha_envio || message.createdAt || new Date())}
              </span>
              
              {/* Read indicator for own messages */}
              {isOwnMessage && (
                <span
                  className={`ml-1 text-xs ${
                    message.leido || message.is_read ? 'text-blue-200' : 'text-blue-300'
                  }`}
                >
                  {message.leido || message.is_read ? '✓✓' : '✓'}
                </span>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default MessageBubble;