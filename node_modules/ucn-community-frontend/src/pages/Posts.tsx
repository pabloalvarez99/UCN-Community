import React, { useState, useEffect } from 'react';
import { Link, useSearchParams } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { postAPI, handleApiError } from '../services/api';
import { Post as PostType, Comment } from '../types';
import {
  HeartIcon,
  ChatBubbleLeftIcon,
  ShareIcon,
  BookmarkIcon,
  EllipsisHorizontalIcon,
  MagnifyingGlassIcon,
  FunnelIcon,
  PlusIcon,
  DocumentTextIcon
} from '@heroicons/react/24/outline';
import {
  HeartIcon as HeartSolid,
  BookmarkIcon as BookmarkSolid
} from '@heroicons/react/24/solid';

const Posts: React.FC = () => {
  const { user } = useAuth();
  const [searchParams, setSearchParams] = useSearchParams();
  const [posts, setPosts] = useState<PostType[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState(searchParams.get('search') || '');
  const [selectedCategory, setSelectedCategory] = useState(searchParams.get('category') || 'all');
  const [sortBy, setSortBy] = useState(searchParams.get('sort') || 'recent');

  const categories = [
    { value: 'all', label: 'Todas las categorías' },
    { value: 'academico', label: 'Académico' },
    { value: 'social', label: 'Social' },
    { value: 'deportes', label: 'Deportes' },
    { value: 'cultural', label: 'Cultural' },
    { value: 'servicios', label: 'Servicios' },
    { value: 'perdidos_encontrados', label: 'Perdidos y Encontrados' }
  ];

  const sortOptions = [
    { value: 'recent', label: 'Más recientes' },
    { value: 'popular', label: 'Más populares' },
    { value: 'comments', label: 'Más comentados' }
  ];

  useEffect(() => {
    loadPosts();
  }, [searchTerm, selectedCategory, sortBy]);

  useEffect(() => {
    // Update URL parameters
    const params = new URLSearchParams();
    if (searchTerm) params.set('search', searchTerm);
    if (selectedCategory !== 'all') params.set('category', selectedCategory);
    if (sortBy !== 'recent') params.set('sort', sortBy);
    setSearchParams(params);
  }, [searchTerm, selectedCategory, sortBy, setSearchParams]);

  const loadPosts = async () => {
    try {
      setLoading(true);
      const response = await postAPI.getPosts({
        search: searchTerm || undefined,
        categoria: selectedCategory !== 'all' ? selectedCategory : undefined,
        sortBy,
        limit: 20
      });

      if (response.success && response.data) {
        setPosts(response.data.posts);
      }
    } catch (err) {
      setError(handleApiError(err));
    } finally {
      setLoading(false);
    }
  };

  const handleLike = async (postId: string) => {
    try {
      const response = await postAPI.likePost(postId);
      if (response.success) {
        setPosts(posts.map(post => 
          post._id === postId 
            ? { ...post, likes: response.data.likes, hasLiked: !post.hasLiked }
            : post
        ));
      }
    } catch (err) {
      console.error('Error al dar like:', err);
    }
  };

  const handleBookmark = async (postId: string) => {
    try {
      // API call for bookmark would go here
      console.log('Bookmark post:', postId);
    } catch (err) {
      console.error('Error al guardar:', err);
    }
  };

  const getAvatarInitials = (name: string) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  };

  const formatTimeAgo = (date: Date) => {
    const now = new Date();
    const diffMs = now.getTime() - new Date(date).getTime();
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return 'Ahora';
    if (diffMins < 60) return `${diffMins}m`;
    if (diffHours < 24) return `${diffHours}h`;
    if (diffDays < 7) return `${diffDays}d`;
    return new Date(date).toLocaleDateString();
  };

  const getCategoryLabel = (category: string) => {
    const cat = categories.find(c => c.value === category);
    return cat ? cat.label : category;
  };

  if (loading) {
    return (
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="flex items-center justify-center py-12">
          <div className="text-center">
            <div className="spinner w-8 h-8 mx-auto mb-4"></div>
            <p className="text-ucn-gray-600">Cargando publicaciones...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold text-ucn-gray-900">Publicaciones</h1>
          <p className="text-ucn-gray-600">Descubre y comparte contenido con la comunidad UCN</p>
        </div>
        <Link
          to="/posts/create"
          className="btn-primary mt-4 sm:mt-0 flex items-center"
        >
          <PlusIcon className="h-5 w-5 mr-2" />
          Nueva publicación
        </Link>
      </div>

      {/* Filters */}
      <div className="card mb-6">
        <div className="card-body">
          <div className="flex flex-col lg:flex-row lg:items-center space-y-4 lg:space-y-0 lg:space-x-4">
            {/* Search */}
            <div className="flex-1">
              <div className="relative">
                <MagnifyingGlassIcon className="h-5 w-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-ucn-gray-400" />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="Buscar publicaciones..."
                  className="w-full pl-10 pr-4 py-2 border border-ucn-gray-300 rounded-lg focus:ring-2 focus:ring-ucn-600 focus:border-transparent"
                />
              </div>
            </div>

            {/* Category Filter */}
            <div className="flex items-center space-x-2">
              <FunnelIcon className="h-5 w-5 text-ucn-gray-400" />
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="input"
              >
                {categories.map(category => (
                  <option key={category.value} value={category.value}>
                    {category.label}
                  </option>
                ))}
              </select>
            </div>

            {/* Sort */}
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              className="input"
            >
              {sortOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Posts */}
      {error ? (
        <div className="card border-red-200 bg-red-50">
          <div className="card-body text-center">
            <p className="text-red-700">{error}</p>
            <button
              onClick={loadPosts}
              className="btn-primary mt-4"
            >
              Reintentar
            </button>
          </div>
        </div>
      ) : posts.length > 0 ? (
        <div className="space-y-6">
          {posts.map((post) => (
            <article key={post._id} className="card hover-lift">
              <div className="card-body">
                {/* Post Header */}
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <Link 
                      to={`/profile/${post.autor._id}`}
                      className="flex items-center space-x-3"
                    >
                      {post.autor.foto_perfil ? (
                        <img
                          className="w-10 h-10 rounded-full object-cover"
                          src={post.autor.foto_perfil}
                          alt={post.autor.name}
                        />
                      ) : (
                        <div className="avatar-md">
                          {getAvatarInitials(post.autor.name)}
                        </div>
                      )}
                      <div>
                        <h4 className="font-semibold text-ucn-gray-900 hover:text-ucn-600">
                          {post.autor.name}
                        </h4>
                        <div className="flex items-center space-x-2 text-sm text-ucn-gray-500">
                          <span className="badge-primary">{getCategoryLabel(post.categoria)}</span>
                          <span>•</span>
                          <span>{formatTimeAgo(post.fecha_creacion)}</span>
                        </div>
                      </div>
                    </Link>
                  </div>

                  <button className="btn-ghost p-2">
                    <EllipsisHorizontalIcon className="h-5 w-5" />
                  </button>
                </div>

                {/* Post Content */}
                <div className="mb-4">
                  <h2 className="text-xl font-semibold text-ucn-gray-900 mb-3">
                    {post.titulo}
                  </h2>
                  <p className="text-ucn-gray-700 leading-relaxed">
                    {post.contenido}
                  </p>
                </div>

                {/* Post Actions */}
                <div className="flex items-center justify-between pt-4 border-t border-ucn-gray-100">
                  <div className="flex items-center space-x-6">
                    <button
                      onClick={() => handleLike(post._id)}
                      className={`flex items-center space-x-2 transition-colors ${
                        post.hasLiked 
                          ? 'text-red-600 hover:text-red-700' 
                          : 'text-ucn-gray-600 hover:text-red-600'
                      }`}
                    >
                      {post.hasLiked ? (
                        <HeartSolid className="h-5 w-5" />
                      ) : (
                        <HeartIcon className="h-5 w-5" />
                      )}
                      <span className="text-sm font-medium">{post.likes.length}</span>
                    </button>

                    <Link
                      to={`/posts/${post._id}`}
                      className="flex items-center space-x-2 text-ucn-gray-600 hover:text-ucn-600 transition-colors"
                    >
                      <ChatBubbleLeftIcon className="h-5 w-5" />
                      <span className="text-sm font-medium">{post.comentarios.length}</span>
                    </Link>

                    <button className="flex items-center space-x-2 text-ucn-gray-600 hover:text-ucn-600 transition-colors">
                      <ShareIcon className="h-5 w-5" />
                      <span className="text-sm font-medium">Compartir</span>
                    </button>
                  </div>

                  <button
                    onClick={() => handleBookmark(post._id)}
                    className="text-ucn-gray-600 hover:text-ucn-600 transition-colors"
                  >
                    <BookmarkIcon className="h-5 w-5" />
                  </button>
                </div>
              </div>
            </article>
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <div className="w-16 h-16 bg-ucn-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <DocumentTextIcon className="h-8 w-8 text-ucn-gray-400" />
          </div>
          <h3 className="text-lg font-medium text-ucn-gray-900 mb-2">
            No se encontraron publicaciones
          </h3>
          <p className="text-ucn-gray-600 mb-6">
            {searchTerm || selectedCategory !== 'all' 
              ? 'Intenta ajustar tus filtros de búsqueda'
              : 'Sé el primero en publicar algo en la comunidad'
            }
          </p>
          <Link
            to="/posts/create"
            className="btn-primary inline-flex items-center"
          >
            <PlusIcon className="h-5 w-5 mr-2" />
            Crear publicación
          </Link>
        </div>
      )}
    </div>
  );
};

export default Posts;