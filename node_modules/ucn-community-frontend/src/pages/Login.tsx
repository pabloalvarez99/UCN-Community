import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { LoginData } from '../types';
import { EyeIcon, EyeSlashIcon, UserIcon, LockClosedIcon } from '@heroicons/react/24/outline';

const Login: React.FC = () => {
  const navigate = useNavigate();
  const { login, loading: authLoading, error: authError, clearError, isAuthenticated } = useAuth();
  const [formData, setFormData] = useState<LoginData>({
    email: '',
    password: '',
    remember_me: false
  });
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // Redirigir si ya está autenticado
  useEffect(() => {
    if (isAuthenticated) {
      navigate('/dashboard');
    }
  }, [isAuthenticated, navigate]);

  // Limpiar errores cuando se monta el componente
  useEffect(() => {
    clearError();
  }, [clearError]);

  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};
    
    if (!formData.email) {
      errors.email = 'El email es requerido';
    } else if (!formData.email.includes('@ucn.cl') && !formData.email.includes('@alumnos.ucn.cl')) {
      errors.email = 'Debe usar un email institucional UCN';
    }

    if (!formData.password) {
      errors.password = 'La contraseña es requerida';
    } else if (formData.password.length < 6) {
      errors.password = 'La contraseña debe tener al menos 6 caracteres';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));

    // Limpiar error del campo cuando el usuario empiece a escribir
    if (formErrors[name]) {
      setFormErrors(prev => ({ ...prev, [name]: '' }));
    }
    
    clearError();
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      await login(formData);
      navigate('/dashboard');
    } catch (err: any) {
      console.error('Error en login:', err);
      // El error ya se maneja en AuthContext
    } finally {
      setLoading(false);
    }
  };

  const isFormLoading = loading || authLoading;
  const errorMessage = authError;

  return (
    <div className="min-h-screen bg-ucn-gradient flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
      {/* Background decorative elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-white/10 rounded-full blur-3xl"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-white/10 rounded-full blur-3xl"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-white/5 rounded-full blur-3xl"></div>
      </div>

      <div className="max-w-md w-full space-y-8 relative z-10">
        {/* Header */}
        <div className="text-center">
          <div className="mx-auto h-20 w-20 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center mb-6">
            <UserIcon className="h-10 w-10 text-white" />
          </div>
          <h2 className="text-4xl font-display font-bold text-white mb-2">
            UCN Community - Campus Guayacán
          </h2>
          <p className="text-ucn-100 text-lg">
            Inicia sesión con tu email UCN
          </p>
        </div>

        {/* Login Form */}
        <div className="card bg-white/95 backdrop-blur-sm shadow-ucn-lg">
          <div className="card-body">
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Email Input */}
              <div>
                <label htmlFor="email" className="block text-sm font-semibold text-ucn-gray-700 mb-2">
                  Email UCN
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <UserIcon className="h-5 w-5 text-ucn-gray-400" />
                  </div>
                  <input
                    id="email"
                    name="email"
                    type="email"
                    required
                    className={`input pl-10 ${formErrors.email ? 'input-error' : ''}`}
                    placeholder="nombre.apellido@alumnos.ucn.cl"
                    value={formData.email}
                    onChange={handleChange}
                    disabled={isFormLoading}
                  />
                </div>
                {formErrors.email && (
                  <p className="mt-2 text-sm text-red-600">{formErrors.email}</p>
                )}
              </div>

              {/* Password Input */}
              <div>
                <label htmlFor="password" className="block text-sm font-semibold text-ucn-gray-700 mb-2">
                  Contraseña
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <LockClosedIcon className="h-5 w-5 text-ucn-gray-400" />
                  </div>
                  <input
                    id="password"
                    name="password"
                    type={showPassword ? 'text' : 'password'}
                    required
                    className={`input pl-10 pr-10 ${formErrors.password ? 'input-error' : ''}`}
                    placeholder="Ingresa tu contraseña"
                    value={formData.password}
                    onChange={handleChange}
                    disabled={isFormLoading}
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 pr-3 flex items-center"
                    onClick={() => setShowPassword(!showPassword)}
                    disabled={isFormLoading}
                  >
                    {showPassword ? (
                      <EyeSlashIcon className="h-5 w-5 text-ucn-gray-400 hover:text-ucn-gray-600" />
                    ) : (
                      <EyeIcon className="h-5 w-5 text-ucn-gray-400 hover:text-ucn-gray-600" />
                    )}
                  </button>
                </div>
                {formErrors.password && (
                  <p className="mt-2 text-sm text-red-600">{formErrors.password}</p>
                )}
              </div>

              {/* Remember me checkbox */}
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <input
                    id="remember_me"
                    name="remember_me"
                    type="checkbox"
                    className="h-4 w-4 text-ucn-600 focus:ring-ucn-500 border-ucn-gray-300 rounded"
                    checked={formData.remember_me}
                    onChange={handleChange}
                    disabled={isFormLoading}
                  />
                  <label htmlFor="remember_me" className="ml-2 block text-sm text-ucn-gray-700">
                    Recordar sesión
                  </label>
                </div>
                <div className="text-sm">
                  <Link 
                    to="/forgot-password" 
                    className="font-medium text-ucn-600 hover:text-ucn-700 hover:underline"
                  >
                    ¿Olvidaste tu contraseña?
                  </Link>
                </div>
              </div>

              {/* Error Message */}
              {errorMessage && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 animate-fadeIn">
                  <div className="flex">
                    <div className="ml-3">
                      <h3 className="text-sm font-medium text-red-800">
                        Error al iniciar sesión
                      </h3>
                      <div className="mt-1 text-sm text-red-700">
                        {errorMessage}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Submit Button */}
              <button
                type="submit"
                disabled={isFormLoading}
                className="btn-primary w-full py-3 text-lg font-semibold relative overflow-hidden"
              >
                {isFormLoading ? (
                  <div className="flex items-center justify-center">
                    <div className="spinner w-5 h-5 mr-3"></div>
                    Iniciando sesión...
                  </div>
                ) : (
                  'Ingresar a UCN Community'
                )}
              </button>

              {/* Register Link */}
              <div className="text-center pt-4 border-t border-ucn-gray-200">
                <p className="text-sm text-ucn-gray-600">
                  ¿Eres estudiante UCN?{' '}
                  <Link 
                    to="/register" 
                    className="font-semibold text-ucn-600 hover:text-ucn-700 hover:underline"
                  >
                    Regístrate aquí
                  </Link>
                </p>
                <p className="text-xs text-ucn-gray-500 mt-2">
                  Solo para estudiantes y personal de la UCN
                </p>
              </div>
            </form>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center">
          <p className="text-sm text-white/80">
            Universidad Católica del Norte © 2024
          </p>
          <p className="text-xs text-white/60 mt-1">
            Campus Guayacán - Larrondo 1281, Coquimbo
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;