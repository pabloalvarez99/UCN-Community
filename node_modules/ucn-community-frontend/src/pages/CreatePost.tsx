import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { postAPI, handleApiError } from '../services/api';
import {
  XMarkIcon,
  PhotoIcon,
  LinkIcon,
  PlusIcon,
  ExclamationTriangleIcon
} from '@heroicons/react/24/outline';

const CreatePost: React.FC = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  
  const [formData, setFormData] = useState({
    titulo: '',
    contenido: '',
    categoria: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [charCount, setCharCount] = useState(0);

  const categories = [
    { value: 'academico', label: 'Académico', description: 'Contenido relacionado con estudios, clases y proyectos' },
    { value: 'social', label: 'Social', description: 'Eventos sociales, meetups y actividades de la comunidad' },
    { value: 'deportes', label: 'Deportes', description: 'Actividades deportivas, torneos y equipos universitarios' },
    { value: 'cultural', label: 'Cultural', description: 'Arte, música, teatro y actividades culturales' },
    { value: 'servicios', label: 'Servicios', description: 'Ofrecer o buscar servicios dentro de la comunidad' },
    { value: 'perdidos_encontrados', label: 'Perdidos y Encontrados', description: 'Objetos perdidos o encontrados en el campus' }
  ];

  const maxContentLength = 2000;

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    if (name === 'contenido') {
      setCharCount(value.length);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.titulo.trim() || !formData.contenido.trim() || !formData.categoria) {
      setError('Todos los campos son obligatorios');
      return;
    }

    if (formData.contenido.length > maxContentLength) {
      setError(`El contenido no puede superar los ${maxContentLength} caracteres`);
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      const response = await postAPI.createPost({
        titulo: formData.titulo.trim(),
        contenido: formData.contenido.trim(),
        categoria: formData.categoria
      });

      if (response.success) {
        navigate('/posts');
      }
    } catch (err) {
      setError(handleApiError(err));
    } finally {
      setLoading(false);
    }
  };

  const getAvatarInitials = (name: string) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  };

  return (
    <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold text-ucn-gray-900">Nueva publicación</h1>
          <p className="text-ucn-gray-600">Comparte algo interesante con la comunidad UCN</p>
        </div>
        <button
          onClick={() => navigate(-1)}
          className="btn-ghost p-2"
          title="Cerrar"
        >
          <XMarkIcon className="h-6 w-6" />
        </button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Form */}
        <div className="lg:col-span-2">
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Author Info */}
            <div className="card">
              <div className="card-body">
                <div className="flex items-center space-x-3 mb-4">
                  {user?.foto_perfil ? (
                    <img
                      className="w-12 h-12 rounded-full object-cover"
                      src={user.foto_perfil}
                      alt={user.name}
                    />
                  ) : (
                    <div className="w-12 h-12 bg-ucn-gradient rounded-full flex items-center justify-center text-white font-bold">
                      {getAvatarInitials(user?.name || '')}
                    </div>
                  )}
                  <div>
                    <h3 className="font-semibold text-ucn-gray-900">{user?.name}</h3>
                    <p className="text-sm text-ucn-gray-500">Publicando como {user?.role === 'student' ? 'estudiante' : 'profesor'}</p>
                  </div>
                </div>

                {/* Title */}
                <div className="mb-4">
                  <label htmlFor="titulo" className="block text-sm font-medium text-ucn-gray-700 mb-2">
                    Título de la publicación
                  </label>
                  <input
                    type="text"
                    id="titulo"
                    name="titulo"
                    value={formData.titulo}
                    onChange={handleInputChange}
                    placeholder="¿Qué quieres compartir?"
                    className="input text-lg font-semibold"
                    maxLength={150}
                    required
                  />
                  <p className="text-xs text-ucn-gray-500 mt-1">
                    {formData.titulo.length}/150 caracteres
                  </p>
                </div>

                {/* Content */}
                <div className="mb-4">
                  <label htmlFor="contenido" className="block text-sm font-medium text-ucn-gray-700 mb-2">
                    Contenido
                  </label>
                  <textarea
                    id="contenido"
                    name="contenido"
                    value={formData.contenido}
                    onChange={handleInputChange}
                    placeholder="Escribe aquí el contenido de tu publicación..."
                    rows={8}
                    className={`input resize-none ${
                      charCount > maxContentLength ? 'border-red-500 focus:ring-red-500' : ''
                    }`}
                    required
                  />
                  <div className="flex justify-between items-center mt-1">
                    <p className="text-xs text-ucn-gray-500">
                      Describe tu publicación de manera clara y detallada
                    </p>
                    <p className={`text-xs ${
                      charCount > maxContentLength 
                        ? 'text-red-500' 
                        : charCount > maxContentLength * 0.8 
                        ? 'text-yellow-600' 
                        : 'text-ucn-gray-500'
                    }`}>
                      {charCount}/{maxContentLength}
                    </p>
                  </div>
                </div>

                {/* Category */}
                <div className="mb-6">
                  <label htmlFor="categoria" className="block text-sm font-medium text-ucn-gray-700 mb-2">
                    Categoría
                  </label>
                  <select
                    id="categoria"
                    name="categoria"
                    value={formData.categoria}
                    onChange={handleInputChange}
                    className="input"
                    required
                  >
                    <option value="">Seleccionar categoría</option>
                    {categories.map(category => (
                      <option key={category.value} value={category.value}>
                        {category.label}
                      </option>
                    ))}
                  </select>
                  {formData.categoria && (
                    <p className="text-sm text-ucn-gray-600 mt-1">
                      {categories.find(c => c.value === formData.categoria)?.description}
                    </p>
                  )}
                </div>

                {/* Media Upload (Future Feature) */}
                <div className="border-2 border-dashed border-ucn-gray-300 rounded-lg p-6 text-center bg-ucn-gray-50">
                  <PhotoIcon className="h-12 w-12 text-ucn-gray-400 mx-auto mb-3" />
                  <p className="text-sm text-ucn-gray-600 mb-2">Próximamente: Subir imágenes y archivos</p>
                  <p className="text-xs text-ucn-gray-500">Esta funcionalidad estará disponible en futuras versiones</p>
                </div>

                {/* Error Message */}
                {error && (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start space-x-3">
                    <ExclamationTriangleIcon className="h-5 w-5 text-red-500 mt-0.5" />
                    <p className="text-sm text-red-700">{error}</p>
                  </div>
                )}

                {/* Submit Button */}
                <div className="flex items-center justify-end space-x-3 pt-4 border-t border-ucn-gray-200">
                  <button
                    type="button"
                    onClick={() => navigate(-1)}
                    className="btn-secondary"
                  >
                    Cancelar
                  </button>
                  <button
                    type="submit"
                    disabled={loading || !formData.titulo.trim() || !formData.contenido.trim() || !formData.categoria}
                    className="btn-primary flex items-center"
                  >
                    {loading ? (
                      <div className="spinner w-4 h-4 mr-2"></div>
                    ) : (
                      <PlusIcon className="h-4 w-4 mr-2" />
                    )}
                    {loading ? 'Publicando...' : 'Publicar'}
                  </button>
                </div>
              </div>
            </div>
          </form>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Publishing Guidelines */}
          <div className="card">
            <div className="card-body">
              <h3 className="font-semibold text-ucn-gray-900 mb-3">Normas de la comunidad</h3>
              <ul className="text-sm text-ucn-gray-600 space-y-2">
                <li className="flex items-start">
                  <span className="text-ucn-600 mr-2">•</span>
                  Mantén un lenguaje respetuoso y profesional
                </li>
                <li className="flex items-start">
                  <span className="text-ucn-600 mr-2">•</span>
                  Verifica la información antes de compartirla
                </li>
                <li className="flex items-start">
                  <span className="text-ucn-600 mr-2">•</span>
                  Usa la categoría más apropiada para tu contenido
                </li>
                <li className="flex items-start">
                  <span className="text-ucn-600 mr-2">•</span>
                  No compartas información personal sensible
                </li>
                <li className="flex items-start">
                  <span className="text-ucn-600 mr-2">•</span>
                  Respeta los derechos de autor y propiedad intelectual
                </li>
              </ul>
            </div>
          </div>

          {/* Category Help */}
          {formData.categoria && (
            <div className="card">
              <div className="card-body">
                <h3 className="font-semibold text-ucn-gray-900 mb-2">
                  {categories.find(c => c.value === formData.categoria)?.label}
                </h3>
                <p className="text-sm text-ucn-gray-600">
                  {categories.find(c => c.value === formData.categoria)?.description}
                </p>
              </div>
            </div>
          )}

          {/* Tips */}
          <div className="card bg-ucn-50 border-ucn-200">
            <div className="card-body">
              <h3 className="font-semibold text-ucn-700 mb-2">💡 Consejos</h3>
              <ul className="text-sm text-ucn-600 space-y-1">
                <li>• Usa títulos claros y descriptivos</li>
                <li>• Incluye detalles relevantes en el contenido</li>
                <li>• Revisa tu publicación antes de enviarla</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreatePost;