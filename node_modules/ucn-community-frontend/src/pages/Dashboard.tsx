import React, { useState, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { useSocket } from '../contexts/SocketContext';
import { postAPI, chatAPI, handleApiError, retryApiCall } from '../services/api';
import { 
  PlusIcon, 
  HeartIcon, 
  ChatBubbleLeftIcon, 
  ShareIcon,
  EllipsisHorizontalIcon,
  UserGroupIcon,
  MapPinIcon,
  DocumentTextIcon,
  XMarkIcon,
  LinkIcon,
  CheckIcon,
  PencilIcon,
  TrashIcon,
  ExclamationTriangleIcon
} from '@heroicons/react/24/outline';
import { HeartIcon as HeartSolid } from '@heroicons/react/24/solid';

interface Post {
  _id: string;
  autor: {
    _id: string;
    name: string;
    foto_perfil?: string;
    carrera: string;
    campus: string;
  };
  titulo: string;
  contenido: string;
  categoria: string;
  likes: string[];
  comentarios: any[];
  fecha_creacion: Date;
  archivos_adjuntos?: string[];
  hasLiked?: boolean;
}

interface RecentChat {
  _id: string;
  nombre: string;
  participantes: any[];
  ultimo_mensaje?: any;
  fecha_ultimo_mensaje?: Date;
}

const Dashboard: React.FC = () => {
  const { user } = useAuth();
  const { isConnected, onlineUsers } = useSocket();
  const navigate = useNavigate();
  const [posts, setPosts] = useState<Post[]>([]);
  const [recentChats, setRecentChats] = useState<RecentChat[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [loadingPosts, setLoadingPosts] = useState(false);
  const [showCreatePost, setShowCreatePost] = useState(false);
  const [postContent, setPostContent] = useState('');
  const [isPublishing, setIsPublishing] = useState(false);
  const [showOnlineUsers, setShowOnlineUsers] = useState(false);
  const [showComments, setShowComments] = useState(false);
  const [selectedPost, setSelectedPost] = useState<Post | null>(null);
  const [newComment, setNewComment] = useState('');
  const [isSubmittingComment, setIsSubmittingComment] = useState(false);
  const [showShareModal, setShowShareModal] = useState(false);
  const [sharePost, setSharePost] = useState<Post | null>(null);
  const [showCopyMessage, setShowCopyMessage] = useState(false);
  const [showOptionsMenu, setShowOptionsMenu] = useState<string | null>(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingPost, setEditingPost] = useState<Post | null>(null);
  const [editContent, setEditContent] = useState('');
  const [isUpdating, setIsUpdating] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [deletingPost, setDeletingPost] = useState<Post | null>(null);
  const [loadingMore, setLoadingMore] = useState(false);
  const [hasMorePosts, setHasMorePosts] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Load dashboard data
  useEffect(() => {
    const loadDashboardData = async () => {
      try {
        setLoading(true);
        
        // Load recent posts and chats in parallel with retry logic
        const [postsResponse, chatsResponse] = await Promise.all([
          retryApiCall(() => postAPI.getPosts({ limit: 10, sortBy: 'fecha_creacion', page: 1 })),
          retryApiCall(() => chatAPI.getChats())
        ]);

        if (postsResponse.success && postsResponse.data) {
          // Ensure posts are sorted by date (newest first)
          const sortedPosts = postsResponse.data.posts.sort((a: any, b: any) => 
            new Date(b.fecha_creacion).getTime() - new Date(a.fecha_creacion).getTime()
          );
          setPosts(sortedPosts || []);
          
          // Check if there are more posts available
          setHasMorePosts(postsResponse.data.page < postsResponse.data.pages);
          setCurrentPage(postsResponse.data.page || 1);
        }

        if (chatsResponse.success && chatsResponse.data) {
          setRecentChats(chatsResponse.data.chats.slice(0, 5) || []);
        }

      } catch (err) {
        setError(handleApiError(err));
      } finally {
        setLoading(false);
      }
    };

    loadDashboardData();
  }, []);

  // Auto-refresh posts every 30 seconds
  useEffect(() => {
    const refreshPosts = async () => {
      try {
        setIsRefreshing(true);
        const postsResponse = await retryApiCall(() => 
          postAPI.getPosts({ limit: 10, sortBy: 'fecha_creacion', page: 1 })
        );
        if (postsResponse.success && postsResponse.data) {
          const sortedPosts = postsResponse.data.posts.sort((a: any, b: any) => 
            new Date(b.fecha_creacion).getTime() - new Date(a.fecha_creacion).getTime()
          );
          setPosts(sortedPosts || []);
          setHasMorePosts(postsResponse.data.page < postsResponse.data.pages);
          setCurrentPage(postsResponse.data.page || 1);
        }
      } catch (err) {
        // Silent error handling for auto-refresh
        console.error('Error auto-refreshing posts:', err);
      } finally {
        setIsRefreshing(false);
      }
    };

    const intervalId = setInterval(refreshPosts, 30000); // 30 seconds

    return () => clearInterval(intervalId);
  }, []);

  // Auto-focus textarea when modal opens
  useEffect(() => {
    if (showCreatePost && textareaRef.current) {
      textareaRef.current.focus();
    }
  }, [showCreatePost]);

  // Auto-clear error messages after 5 seconds
  useEffect(() => {
    if (error) {
      const timeoutId = setTimeout(() => {
        setError(null);
      }, 5000);
      return () => clearTimeout(timeoutId);
    }
  }, [error]);

  const handleLikePost = async (postId: string) => {
    if (!user) return;
    
    try {
      setLoadingPosts(true);
      await retryApiCall(() => postAPI.likePost(postId));
      
      // Update local state with correct like info
      setPosts(prev => prev.map(post => {
        if (post._id === postId) {
          const wasLiked = post.hasLiked;
          const currentLikes = Array.isArray(post.likes) ? post.likes.length : (post.likes as any);
          
          return {
            ...post,
            hasLiked: !wasLiked,
            likes: wasLiked ? currentLikes - 1 : currentLikes + 1
          } as any;
        }
        return post;
      }));
    } catch (err) {
      setError('Error al procesar tu like. Inténtalo de nuevo.');
      console.error('Error al dar like:', err);
    } finally {
      setLoadingPosts(false);
    }
  };

  const handleCreatePost = async () => {
    if (!postContent.trim() || postContent.trim().length < 10) {
      return;
    }

    setIsPublishing(true);
    try {
      const response = await retryApiCall(() => postAPI.createPost({
        contenido: postContent.trim()
      }));

      if (response.success) {
        setPostContent('');
        setShowCreatePost(false);
        // Reload posts to show new post (sorted by date)
        const postsResponse = await retryApiCall(() => 
          postAPI.getPosts({ limit: 10, sortBy: 'fecha_creacion', page: 1 })
        );
        if (postsResponse.success && postsResponse.data) {
          const sortedPosts = postsResponse.data.posts.sort((a: any, b: any) => 
            new Date(b.fecha_creacion).getTime() - new Date(a.fecha_creacion).getTime()
          );
          setPosts(sortedPosts || []);
        }
      } else {
        setError(response.message || 'Error al crear la publicación. Inténtalo de nuevo.');
      }
    } catch (error: any) {
      setError(error.response?.data?.message || 'Error de conexión. Verifica tu conexión a internet.');
      console.error('Error al crear publicación:', error);
    } finally {
      setIsPublishing(false);
    }
  };

  const getAvatarInitials = (name: string) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  };

  const handleStartChat = (userId: string) => {
    // Navigate to chat with this user
    navigate(`/chat?user=${userId}`);
    setShowOnlineUsers(false);
  };

  const handleShowComments = (post: Post) => {
    setSelectedPost(post);
    setShowComments(true);
  };

  const handleSubmitComment = async () => {
    if (!newComment.trim() || !selectedPost || !user) return;

    setIsSubmittingComment(true);
    try {
      const response = await retryApiCall(() => postAPI.addComment(selectedPost._id, {
        contenido: newComment.trim()
      }));

      if (response.success && response.data) {
        // Update local state
        setPosts(prev => prev.map(post => {
          if (post._id === selectedPost._id) {
            return {
              ...post,
              comentarios: [...post.comentarios, response.data]
            };
          }
          return post;
        }));
        
        // Update selected post
        setSelectedPost(prev => prev ? {
          ...prev,
          comentarios: [...prev.comentarios, response.data]
        } : null);
        
        setNewComment('');
      } else {
        setError(response.message || 'Error al enviar comentario. Inténtalo de nuevo.');
      }
    } catch (error: any) {
      setError(error.response?.data?.message || 'Error al enviar comentario. Verifica tu conexión.');
      console.error('Error al enviar comentario:', error);
    } finally {
      setIsSubmittingComment(false);
    }
  };

  const handleShowShare = (post: Post) => {
    setSharePost(post);
    setShowShareModal(true);
  };

  const handleCopyLink = async () => {
    if (!sharePost) return;
    
    try {
      const postUrl = `${window.location.origin}/posts/${sharePost._id}`;
      await navigator.clipboard.writeText(postUrl);
      setShowCopyMessage(true);
      setTimeout(() => setShowCopyMessage(false), 2000);
    } catch (error) {
      console.error('Error copying to clipboard:', error);
    }
  };

  const handleShareInFeed = async () => {
    if (!sharePost) return;
    
    try {
      // For now, create a new post that references the original
      const response = await postAPI.createPost({
        contenido: `Compartiendo: ${sharePost.contenido}`,
        originalPost: sharePost._id
      });

      if (response.success) {
        setShowShareModal(false);
        // Reload posts to show shared post (sorted by date)
        const postsResponse = await postAPI.getPosts({ limit: 10, sortBy: 'fecha_creacion', page: 1 });
        if (postsResponse.success && postsResponse.data) {
          const sortedPosts = postsResponse.data.posts.sort((a: any, b: any) => 
            new Date(b.fecha_creacion).getTime() - new Date(a.fecha_creacion).getTime()
          );
          setPosts(sortedPosts || []);
        }
      } else {
        setError(response.message || 'Error al compartir la publicación.');
      }
    } catch (error: any) {
      setError(error.response?.data?.message || 'Error al compartir la publicación. Verifica tu conexión.');
      console.error('Error sharing post:', error);
    }
  };

  const handleShowEdit = (post: Post) => {
    setEditingPost(post);
    setEditContent(post.contenido);
    setShowEditModal(true);
    setShowOptionsMenu(null);
  };

  const handleUpdatePost = async () => {
    if (!editContent.trim() || !editingPost || editContent.trim().length < 10) return;

    setIsUpdating(true);
    try {
      const response = await retryApiCall(() => postAPI.updatePost(editingPost._id, {
        contenido: editContent.trim()
      }));

      if (response.success) {
        // Update local state
        setPosts(prev => prev.map(post => {
          if (post._id === editingPost._id) {
            return {
              ...post,
              contenido: editContent.trim()
            };
          }
          return post;
        }));
        
        setShowEditModal(false);
        setEditingPost(null);
        setEditContent('');
      } else {
        setError(response.message || 'Error al actualizar la publicación.');
      }
    } catch (error: any) {
      setError(error.response?.data?.message || 'Error al actualizar la publicación. Verifica tu conexión.');
      console.error('Error updating post:', error);
    } finally {
      setIsUpdating(false);
    }
  };

  const handleShowDeleteConfirm = (post: Post) => {
    setDeletingPost(post);
    setShowDeleteConfirm(true);
    setShowOptionsMenu(null);
  };

  const handleDeletePost = async () => {
    if (!deletingPost) return;

    try {
      const response = await retryApiCall(() => postAPI.deletePost(deletingPost._id));

      if (response.success) {
        // Remove post from local state
        setPosts(prev => prev.filter(post => post._id !== deletingPost._id));
        setShowDeleteConfirm(false);
        setDeletingPost(null);
      } else {
        setError(response.message || 'Error al eliminar la publicación.');
      }
    } catch (error: any) {
      setError(error.response?.data?.message || 'Error al eliminar la publicación. Verifica tu conexión.');
      console.error('Error deleting post:', error);
    }
  };

  const handleLoadMorePosts = async () => {
    if (loadingMore || !hasMorePosts) return;

    setLoadingMore(true);
    try {
      const nextPage = currentPage + 1;
      const postsResponse = await retryApiCall(() => postAPI.getPosts({ 
        limit: 10, 
        sortBy: 'fecha_creacion', 
        page: nextPage 
      }));

      if (postsResponse.success && postsResponse.data) {
        const sortedNewPosts = postsResponse.data.posts.sort((a: any, b: any) => 
          new Date(b.fecha_creacion).getTime() - new Date(a.fecha_creacion).getTime()
        );
        
        // Append new posts to existing ones
        setPosts(prev => [...prev, ...sortedNewPosts]);
        
        // Update pagination info
        setHasMorePosts(postsResponse.data.page < postsResponse.data.pages);
        setCurrentPage(postsResponse.data.page || nextPage);
      }
    } catch (err) {
      console.error('Error loading more posts:', err);
    } finally {
      setLoadingMore(false);
    }
  };

  const formatTimeAgo = (date: Date) => {
    const now = new Date();
    const diffMs = now.getTime() - new Date(date).getTime();
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return 'Ahora';
    if (diffMins < 60) return `${diffMins}min`;
    if (diffHours < 24) return `${diffHours}h`;
    if (diffDays < 7) return `${diffDays}d`;
    return new Date(date).toLocaleDateString();
  };

  if (loading) {
    return (
      <div className="flex-1 flex items-center justify-center">
        <div className="text-center">
          <div className="spinner w-8 h-8 mx-auto mb-4"></div>
          <p className="text-ucn-gray-600">Cargando dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      {/* Welcome Section */}
      <div className="mb-8">
        <div className="bg-ucn-gradient rounded-xl p-6 text-white">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-display font-bold mb-2">
                Bienvenido {user?.name} - {user?.carrera}
              </h1>
              <p className="text-ucn-100">
                Campus Guayacán - Larrondo 1281, Coquimbo
              </p>
              <div className="mt-2 flex items-center space-x-4 text-sm text-ucn-100">
                <div className="flex items-center">
                  <MapPinIcon className="h-4 w-4 mr-1" />
                  Campus Guayacán
                </div>
                <div className="flex items-center">
                  <UserGroupIcon className="h-4 w-4 mr-1" />
                  {user?.carrera}
                </div>
                <div className="flex items-center">
                  <div className={`w-2 h-2 rounded-full mr-1 ${isConnected ? 'bg-green-300' : 'bg-red-300'}`}></div>
                  {isConnected ? 'Conectado' : 'Desconectado'}
                </div>
              </div>
            </div>
            <div className="hidden sm:block">
              <button
                onClick={() => setShowCreatePost(true)}
                className="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center"
              >
                <PlusIcon className="h-5 w-5 mr-2" />
                Nueva publicación
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Main Feed */}
        <div className="lg:col-span-3 space-y-6">
          {/* Quick Actions */}
          <div className="card">
            <div className="card-body">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-ucn-gray-900">
                  ¿Qué quieres hacer?
                </h3>
              </div>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <button
                  key="quick-action-publish"
                  onClick={() => setShowCreatePost(true)}
                  className="flex flex-col items-center p-4 rounded-lg hover:bg-ucn-gray-50 transition-colors group w-full"
                >
                  <div className="w-12 h-12 bg-ucn-100 rounded-full flex items-center justify-center group-hover:bg-ucn-200 transition-colors">
                    <PlusIcon className="h-6 w-6 text-ucn-600" />
                  </div>
                  <span className="mt-2 text-sm font-medium text-ucn-gray-700">Publicar</span>
                </button>
                
                <button
                  key="quick-action-chat"
                  onClick={() => navigate('/chat')}
                  className="flex flex-col items-center p-4 rounded-lg hover:bg-ucn-gray-50 transition-colors group w-full"
                >
                  <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center group-hover:bg-green-200 transition-colors">
                    <ChatBubbleLeftIcon className="h-6 w-6 text-green-600" />
                  </div>
                  <span className="mt-2 text-sm font-medium text-ucn-gray-700">Chat</span>
                </button>

                <button
                  key="quick-action-profile"
                  onClick={() => navigate('/profile')}
                  className="flex flex-col items-center p-4 rounded-lg hover:bg-ucn-gray-50 transition-colors group w-full"
                >
                  <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center group-hover:bg-purple-200 transition-colors">
                    {user?.foto_perfil ? (
                      <img className="w-8 h-8 rounded-full object-cover" src={user.foto_perfil} alt="" />
                    ) : (
                      <span className="text-purple-600 font-semibold text-lg">
                        {getAvatarInitials(user?.name || '')}
                      </span>
                    )}
                  </div>
                  <span className="mt-2 text-sm font-medium text-ucn-gray-700">Perfil</span>
                </button>

                <button
                  key="quick-action-online"
                  onClick={() => setShowOnlineUsers(true)}
                  className="flex flex-col items-center p-4 rounded-lg hover:bg-ucn-gray-50 transition-colors group w-full"
                >
                  <div className="w-12 h-12 bg-ucn-gray-100 rounded-full flex items-center justify-center group-hover:bg-ucn-gray-200 transition-colors">
                    <UserGroupIcon className="h-6 w-6 text-ucn-gray-600" />
                  </div>
                  <span className="mt-2 text-sm font-medium text-ucn-gray-700">
                    {onlineUsers.length} online
                  </span>
                </button>
              </div>
            </div>
          </div>

          {/* Feed de publicaciones */}
          <div>
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-2">
                <h2 className="text-xl font-semibold text-ucn-gray-900">Publicaciones recientes</h2>
                {isRefreshing && (
                  <div className="animate-spin w-4 h-4 border-2 border-ucn-600 border-t-transparent rounded-full"></div>
                )}
              </div>
              <button
                onClick={handleLoadMorePosts}
                disabled={loadingMore || !hasMorePosts}
                className="text-ucn-600 hover:text-ucn-700 font-medium text-sm disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loadingMore ? (
                  <>
                    <div className="animate-spin inline-block w-3 h-3 border border-ucn-600 border-t-transparent rounded-full mr-1"></div>
                    Cargando...
                  </>
                ) : hasMorePosts ? (
                  'Ver más'
                ) : (
                  'No hay más'
                )}
              </button>
            </div>

            {error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                <p className="text-red-700 text-sm">{error}</p>
              </div>
            )}

            <div className="space-y-6">
              {posts.length > 0 ? (
                posts.map((post) => (
                  <article key={post._id} className="card hover-lift">
                    <div className="card-body">
                      {/* Post header */}
                      <div className="flex items-start justify-between">
                        <div className="flex items-center space-x-3">
                          {post.autor.foto_perfil ? (
                            <img
                              className="w-10 h-10 rounded-full object-cover"
                              src={post.autor.foto_perfil}
                              alt={post.autor.name}
                            />
                          ) : (
                            <div className="avatar-md">
                              {getAvatarInitials(post.autor.name)}
                            </div>
                          )}
                          <div>
                            <h4 className="font-semibold text-ucn-gray-900">
                              {post.autor.name}
                            </h4>
                            <div className="flex items-center space-x-2 text-sm text-ucn-gray-500">
                              <span>{post.autor.carrera}</span>
                              <span>•</span>
                              <span>{formatTimeAgo(post.fecha_creacion)}</span>
                              <span>•</span>
                              <span className="badge-primary">{post.categoria}</span>
                            </div>
                          </div>
                        </div>
                        {user && user._id === post.autor._id && (
                          <div className="relative">
                            <button 
                              onClick={() => setShowOptionsMenu(showOptionsMenu === post._id ? null : post._id)}
                              className="p-1 text-ucn-gray-400 hover:text-ucn-gray-600 rounded"
                            >
                              <EllipsisHorizontalIcon className="h-5 w-5" />
                            </button>
                            
                            {/* Options dropdown */}
                            {showOptionsMenu === post._id && (
                              <>
                                {/* Backdrop */}
                                <div 
                                  className="fixed inset-0 z-10" 
                                  onClick={() => setShowOptionsMenu(null)}
                                />
                                
                                {/* Dropdown */}
                                <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-20">
                                  <div className="py-1">
                                    <button
                                      onClick={() => handleShowEdit(post)}
                                      className="w-full flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50"
                                    >
                                      <PencilIcon className="h-4 w-4 mr-3" />
                                      Editar
                                    </button>
                                    <button
                                      onClick={() => handleShowDeleteConfirm(post)}
                                      className="w-full flex items-center px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                                    >
                                      <TrashIcon className="h-4 w-4 mr-3" />
                                      Eliminar
                                    </button>
                                  </div>
                                </div>
                              </>
                            )}
                          </div>
                        )}
                      </div>

                      {/* Post content */}
                      <div className="mt-4">
                        <h3 className="text-lg font-semibold text-ucn-gray-900 mb-2">
                          {post.titulo}
                        </h3>
                        <p className="text-ucn-gray-700 leading-relaxed">
                          {post.contenido}
                        </p>
                      </div>

                      {/* Post actions */}
                      <div className="mt-6 flex items-center justify-between pt-4 border-t border-ucn-gray-100">
                        <div className="flex items-center space-x-6">
                          <button
                            onClick={() => handleLikePost(post._id)}
                            disabled={loadingPosts}
                            className={`flex items-center space-x-2 transition-colors ${
                              post.hasLiked 
                                ? 'text-red-600 hover:text-red-700' 
                                : 'text-ucn-gray-600 hover:text-red-600'
                            }`}
                          >
                            {post.hasLiked ? (
                              <HeartSolid className="h-5 w-5" />
                            ) : (
                              <HeartIcon className="h-5 w-5" />
                            )}
                            <span className="text-sm">{Array.isArray(post.likes) ? post.likes.length : post.likes}</span>
                          </button>
                          
                          <button 
                            onClick={() => handleShowComments(post)}
                            className="flex items-center space-x-2 text-ucn-gray-600 hover:text-ucn-700 transition-colors"
                          >
                            <ChatBubbleLeftIcon className="h-5 w-5" />
                            <span className="text-sm">{post.comentarios.length}</span>
                          </button>
                          
                          <button 
                            onClick={() => handleShowShare(post)}
                            className="flex items-center space-x-2 text-ucn-gray-600 hover:text-ucn-700 transition-colors"
                          >
                            <ShareIcon className="h-5 w-5" />
                            <span className="text-sm">Compartir</span>
                          </button>
                        </div>
                      </div>
                    </div>
                  </article>
                ))
              ) : (
                <div className="text-center py-12">
                  <div className="w-16 h-16 bg-ucn-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <DocumentTextIcon className="h-8 w-8 text-ucn-gray-400" />
                  </div>
                  <h3 className="text-lg font-medium text-ucn-gray-900 mb-2">
                    No hay publicaciones aún
                  </h3>
                  <p className="text-ucn-gray-600 mb-4">
                    Sé el primero en publicar en UCN Community
                  </p>
                  <button
                    onClick={() => setShowCreatePost(true)}
                    className="btn-primary"
                  >
                    <PlusIcon className="h-5 w-5 mr-2" />
                    Crear publicación
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Sidebar */}
        <div className="lg:col-span-1 space-y-6">
          {/* Connection Status */}
          <div className="card">
            <div className="card-body">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold text-ucn-gray-900">Estado</h3>
                <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
              </div>
              <p className="text-sm text-ucn-gray-600">
                {isConnected ? 'Conectado al chat' : 'Desconectado'}
              </p>
            </div>
          </div>

          {/* Recent Chats */}
          <div className="card">
            <div className="card-header">
              <div className="flex items-center justify-between">
                <h3 className="font-semibold text-ucn-gray-900">Chats recientes</h3>
                <Link
                  to="/chat"
                  className="text-ucn-600 hover:text-ucn-700 text-sm font-medium"
                >
                  Ver todos
                </Link>
              </div>
            </div>
            <div className="card-body">
              {recentChats.length > 0 ? (
                <div className="space-y-3">
                  {recentChats.map((chat) => (
                    <Link
                      key={chat._id}
                      to={`/chat/${chat._id}`}
                      className="flex items-center space-x-3 p-2 rounded-lg hover:bg-ucn-gray-50 transition-colors"
                    >
                      <div className="avatar-sm">
                        {getAvatarInitials(chat.nombre)}
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium text-ucn-gray-900 truncate">
                          {chat.nombre}
                        </p>
                        <p className="text-xs text-ucn-gray-500">
                          {chat.participantes.length} participantes
                        </p>
                      </div>
                    </Link>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-ucn-gray-600">No hay chats recientes</p>
              )}
            </div>
          </div>

          {/* Online Users */}
          <div className="card">
            <div className="card-header">
              <h3 className="font-semibold text-ucn-gray-900">
                Usuarios online ({onlineUsers.length})
              </h3>
            </div>
            <div className="card-body">
              {onlineUsers.length > 0 ? (
                <div className="space-y-2">
                  {onlineUsers.slice(0, 8).map((onlineUser, index) => (
                    <div
                      key={`online-user-${onlineUser.userId}-${index}`}
                      className="flex items-center space-x-2"
                    >
                      <div className="relative">
                        <div className="avatar-sm">
                          {getAvatarInitials(onlineUser.name)}
                        </div>
                        <div className="status-online absolute -bottom-0 -right-0"></div>
                      </div>
                      <span className="text-sm text-ucn-gray-700 truncate">
                        {onlineUser.name}
                      </span>
                    </div>
                  ))}
                  {onlineUsers.length > 8 && (
                    <Link
                      key="more-users-link"
                      to="/chat"
                      className="text-xs text-ucn-600 hover:text-ucn-700"
                    >
                      +{onlineUsers.length - 8} más
                    </Link>
                  )}
                </div>
              ) : (
                <p className="text-sm text-ucn-gray-600">
                  No hay usuarios online
                </p>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Create Post Modal */}
      {showCreatePost && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen p-4">
            {/* Backdrop */}
            <div 
              className="fixed inset-0 bg-black bg-opacity-50"
              onClick={() => setShowCreatePost(false)}
            />
            
            {/* Modal */}
            <div className="relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">
                  Crear nueva publicación
                </h3>
                <button
                  onClick={() => setShowCreatePost(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>
              
              {/* Content */}
              <div className="p-4">
                <div className="flex items-start space-x-3 mb-4">
                  <div className="flex-shrink-0">
                    {user?.foto_perfil ? (
                      <img
                        className="h-10 w-10 rounded-full object-cover"
                        src={user.foto_perfil}
                        alt={user.name}
                      />
                    ) : (
                      <div className="w-10 h-10 bg-ucn-gradient rounded-full flex items-center justify-center">
                        <span className="text-white font-semibold text-sm">
                          {user ? getAvatarInitials(user.name) : 'U'}
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium text-gray-900">
                      {user?.name || 'Usuario'}
                    </p>
                  </div>
                </div>
                
                <textarea
                  ref={textareaRef}
                  value={postContent}
                  onChange={(e) => setPostContent(e.target.value)}
                  placeholder="¿Qué quieres compartir con la comunidad UCN?"
                  className="w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-ucn-600 focus:border-transparent"
                  rows={4}
                  maxLength={500}
                />
                
                <div className="flex items-center justify-between mt-3">
                  <span className="text-xs text-gray-500">
                    {postContent.length}/500 caracteres
                    {postContent.trim().length > 0 && postContent.trim().length < 10 && (
                      <span className="text-red-500 ml-2">
                        Mínimo 10 caracteres
                      </span>
                    )}
                  </span>
                </div>
              </div>
              
              {/* Footer */}
              <div className="flex items-center justify-end space-x-3 p-4 border-t border-gray-200">
                <button
                  onClick={() => setShowCreatePost(false)}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-ucn-600"
                >
                  Cancelar
                </button>
                <button
                  onClick={handleCreatePost}
                  disabled={!postContent.trim() || postContent.trim().length < 10 || isPublishing}
                  className="px-4 py-2 text-sm font-medium text-white bg-ucn-600 border border-transparent rounded-md hover:bg-ucn-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-ucn-600 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isPublishing ? (
                    <>
                      <div className="animate-spin inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                      Publicando...
                    </>
                  ) : (
                    'Publicar'
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Online Users Modal */}
      {showOnlineUsers && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen p-4">
            {/* Backdrop */}
            <div 
              className="fixed inset-0 bg-black bg-opacity-50"
              onClick={() => setShowOnlineUsers(false)}
            />
            
            {/* Modal */}
            <div className="relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4 max-h-96">
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">
                  Usuarios conectados ({onlineUsers.length})
                </h3>
                <button
                  onClick={() => setShowOnlineUsers(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>
              
              {/* Content */}
              <div className="p-4 overflow-y-auto max-h-80">
                {onlineUsers.length > 0 ? (
                  <div className="space-y-3">
                    {onlineUsers.map((onlineUser, index) => (
                      <div
                        key={`${onlineUser.userId}-${index}`}
                        className="flex items-center justify-between p-3 rounded-lg hover:bg-gray-50 border border-gray-100"
                      >
                        <div className="flex items-center space-x-3">
                          <div className="relative">
                            <div className="w-10 h-10 bg-ucn-gradient rounded-full flex items-center justify-center">
                              <span className="text-white font-semibold text-sm">
                                {getAvatarInitials(onlineUser.name)}
                              </span>
                            </div>
                            <div className="absolute -bottom-0 -right-0 w-3 h-3 bg-green-500 border-2 border-white rounded-full"></div>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-900">
                              {onlineUser.name}
                            </p>
                            <p className="text-xs text-gray-500">
                              En línea desde {new Date(onlineUser.connectedAt).toLocaleTimeString()}
                            </p>
                            <div className="flex items-center mt-1">
                              <div className="w-2 h-2 bg-green-500 rounded-full mr-1"></div>
                              <span className="text-xs text-green-600">Online</span>
                            </div>
                          </div>
                        </div>
                        <button
                          onClick={() => handleStartChat(onlineUser.userId)}
                          className="px-3 py-1 bg-ucn-600 text-white text-xs rounded-md hover:bg-ucn-700 transition-colors"
                        >
                          Chatear
                        </button>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <UserGroupIcon className="h-12 w-12 text-gray-300 mx-auto mb-3" />
                    <p className="text-gray-500">No hay usuarios conectados</p>
                  </div>
                )}
              </div>
              
              {/* Footer */}
              <div className="p-4 border-t border-gray-200">
                <button
                  onClick={() => setShowOnlineUsers(false)}
                  className="w-full px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Cerrar
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Comments Modal */}
      {showComments && selectedPost && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen p-4">
            {/* Backdrop */}
            <div 
              className="fixed inset-0 bg-black bg-opacity-50"
              onClick={() => setShowComments(false)}
            />
            
            {/* Modal */}
            <div className="relative bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] flex flex-col">
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">
                  Comentarios ({selectedPost.comentarios.length})
                </h3>
                <button
                  onClick={() => setShowComments(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>
              
              {/* Post content */}
              <div className="p-4 border-b border-gray-200">
                <div className="flex items-start space-x-3">
                  <div className="flex-shrink-0">
                    {selectedPost.autor.foto_perfil ? (
                      <img
                        className="w-10 h-10 rounded-full object-cover"
                        src={selectedPost.autor.foto_perfil}
                        alt={selectedPost.autor.name}
                      />
                    ) : (
                      <div className="w-10 h-10 bg-ucn-gradient rounded-full flex items-center justify-center">
                        <span className="text-white font-semibold text-sm">
                          {getAvatarInitials(selectedPost.autor.name)}
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium text-gray-900">
                      {selectedPost.autor.name}
                    </p>
                    <p className="text-xs text-gray-500 mb-2">
                      {formatTimeAgo(selectedPost.fecha_creacion)}
                    </p>
                    <p className="text-gray-700">{selectedPost.contenido}</p>
                  </div>
                </div>
              </div>

              {/* Comments list */}
              <div className="flex-1 overflow-y-auto p-4">
                {selectedPost.comentarios.length > 0 ? (
                  <div className="space-y-4">
                    {selectedPost.comentarios.map((comment, index) => (
                      <div key={comment._id || index} className="flex items-start space-x-3">
                        <div className="flex-shrink-0">
                          {comment.autor?.foto_perfil ? (
                            <img
                              className="w-8 h-8 rounded-full object-cover"
                              src={comment.autor.foto_perfil}
                              alt={comment.autor.name}
                            />
                          ) : (
                            <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                              <span className="text-white font-semibold text-xs">
                                {comment.autor ? getAvatarInitials(comment.autor.name) : '?'}
                              </span>
                            </div>
                          )}
                        </div>
                        <div className="flex-1">
                          <div className="bg-gray-50 rounded-lg p-3">
                            <p className="text-sm font-medium text-gray-900">
                              {comment.autor?.name || 'Usuario'}
                            </p>
                            <p className="text-sm text-gray-700 mt-1">
                              {comment.contenido}
                            </p>
                          </div>
                          <p className="text-xs text-gray-500 mt-1">
                            {comment.fecha_creacion ? formatTimeAgo(comment.fecha_creacion) : 'Ahora'}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <ChatBubbleLeftIcon className="h-12 w-12 text-gray-300 mx-auto mb-3" />
                    <p className="text-gray-500">No hay comentarios aún</p>
                    <p className="text-gray-400 text-sm">¡Sé el primero en comentar!</p>
                  </div>
                )}
              </div>
              
              {/* Add comment */}
              <div className="p-4 border-t border-gray-200">
                <div className="flex items-start space-x-3">
                  <div className="flex-shrink-0">
                    {user?.foto_perfil ? (
                      <img
                        className="w-8 h-8 rounded-full object-cover"
                        src={user.foto_perfil}
                        alt={user.name}
                      />
                    ) : (
                      <div className="w-8 h-8 bg-ucn-gradient rounded-full flex items-center justify-center">
                        <span className="text-white font-semibold text-xs">
                          {user ? getAvatarInitials(user.name) : 'U'}
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="flex-1">
                    <textarea
                      value={newComment}
                      onChange={(e) => setNewComment(e.target.value)}
                      placeholder="Escribe un comentario..."
                      className="w-full p-2 border border-gray-300 rounded-md resize-none focus:ring-2 focus:ring-ucn-600 focus:border-transparent"
                      rows={2}
                      maxLength={500}
                    />
                    <div className="flex items-center justify-between mt-2">
                      <span className="text-xs text-gray-500">
                        {newComment.length}/500
                      </span>
                      <button
                        onClick={handleSubmitComment}
                        disabled={!newComment.trim() || isSubmittingComment}
                        className="px-3 py-1 bg-ucn-600 text-white text-sm rounded-md hover:bg-ucn-700 disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        {isSubmittingComment ? 'Enviando...' : 'Comentar'}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Share Modal */}
      {showShareModal && sharePost && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen p-4">
            {/* Backdrop */}
            <div 
              className="fixed inset-0 bg-black bg-opacity-50"
              onClick={() => setShowShareModal(false)}
            />
            
            {/* Modal */}
            <div className="relative bg-white rounded-lg shadow-xl max-w-sm w-full mx-4">
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">
                  Compartir publicación
                </h3>
                <button
                  onClick={() => setShowShareModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>
              
              {/* Options */}
              <div className="p-4 space-y-2">
                <button
                  onClick={handleCopyLink}
                  className="w-full flex items-center space-x-3 p-3 text-left hover:bg-gray-50 rounded-lg transition-colors"
                >
                  <div className="flex-shrink-0">
                    {showCopyMessage ? (
                      <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                        <CheckIcon className="h-5 w-5 text-green-600" />
                      </div>
                    ) : (
                      <div className="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center">
                        <LinkIcon className="h-5 w-5 text-gray-600" />
                      </div>
                    )}
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium text-gray-900">
                      {showCopyMessage ? 'Enlace copiado' : 'Copiar enlace'}
                    </p>
                    <p className="text-xs text-gray-500">
                      {showCopyMessage ? 'El enlace se copió al portapapeles' : 'Comparte el enlace de esta publicación'}
                    </p>
                  </div>
                </button>
                
                <button
                  onClick={handleShareInFeed}
                  className="w-full flex items-center space-x-3 p-3 text-left hover:bg-gray-50 rounded-lg transition-colors"
                >
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-ucn-100 rounded-full flex items-center justify-center">
                      <ShareIcon className="h-5 w-5 text-ucn-600" />
                    </div>
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium text-gray-900">
                      Compartir en feed
                    </p>
                    <p className="text-xs text-gray-500">
                      Repostear en tu feed personal
                    </p>
                  </div>
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Edit Post Modal */}
      {showEditModal && editingPost && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen p-4">
            {/* Backdrop */}
            <div 
              className="fixed inset-0 bg-black bg-opacity-50"
              onClick={() => setShowEditModal(false)}
            />
            
            {/* Modal */}
            <div className="relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">
                  Editar publicación
                </h3>
                <button
                  onClick={() => setShowEditModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>
              
              {/* Content */}
              <div className="p-4">
                <div className="flex items-start space-x-3 mb-4">
                  <div className="flex-shrink-0">
                    {editingPost.autor.foto_perfil ? (
                      <img
                        className="h-10 w-10 rounded-full object-cover"
                        src={editingPost.autor.foto_perfil}
                        alt={editingPost.autor.name}
                      />
                    ) : (
                      <div className="w-10 h-10 bg-ucn-gradient rounded-full flex items-center justify-center">
                        <span className="text-white font-semibold text-sm">
                          {getAvatarInitials(editingPost.autor.name)}
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium text-gray-900">
                      {editingPost.autor.name}
                    </p>
                  </div>
                </div>
                
                <textarea
                  value={editContent}
                  onChange={(e) => setEditContent(e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-ucn-600 focus:border-transparent"
                  rows={4}
                  maxLength={500}
                />
                
                <div className="flex items-center justify-between mt-3">
                  <span className="text-xs text-gray-500">
                    {editContent.length}/500 caracteres
                    {editContent.trim().length > 0 && editContent.trim().length < 10 && (
                      <span className="text-red-500 ml-2">
                        Mínimo 10 caracteres
                      </span>
                    )}
                  </span>
                </div>
              </div>
              
              {/* Footer */}
              <div className="flex items-center justify-end space-x-3 p-4 border-t border-gray-200">
                <button
                  onClick={() => setShowEditModal(false)}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Cancelar
                </button>
                <button
                  onClick={handleUpdatePost}
                  disabled={!editContent.trim() || editContent.trim().length < 10 || isUpdating}
                  className="px-4 py-2 text-sm font-medium text-white bg-ucn-600 border border-transparent rounded-md hover:bg-ucn-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isUpdating ? (
                    <>
                      <div className="animate-spin inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                      Actualizando...
                    </>
                  ) : (
                    'Guardar cambios'
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && deletingPost && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen p-4">
            {/* Backdrop */}
            <div 
              className="fixed inset-0 bg-black bg-opacity-50"
              onClick={() => setShowDeleteConfirm(false)}
            />
            
            {/* Modal */}
            <div className="relative bg-white rounded-lg shadow-xl max-w-sm w-full mx-4">
              {/* Header */}
              <div className="flex items-center justify-between p-4 border-b border-gray-200">
                <div className="flex items-center">
                  <ExclamationTriangleIcon className="h-6 w-6 text-red-600 mr-2" />
                  <h3 className="text-lg font-semibold text-gray-900">
                    Eliminar publicación
                  </h3>
                </div>
                <button
                  onClick={() => setShowDeleteConfirm(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>
              
              {/* Content */}
              <div className="p-4">
                <p className="text-sm text-gray-600 mb-4">
                  ¿Estás seguro que deseas eliminar esta publicación? Esta acción no se puede deshacer.
                </p>
                <div className="bg-gray-50 rounded-lg p-3">
                  <p className="text-sm text-gray-700 line-clamp-3">
                    {deletingPost.contenido}
                  </p>
                </div>
              </div>
              
              {/* Footer */}
              <div className="flex items-center justify-end space-x-3 p-4 border-t border-gray-200">
                <button
                  onClick={() => setShowDeleteConfirm(false)}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Cancelar
                </button>
                <button
                  onClick={handleDeletePost}
                  className="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700"
                >
                  Eliminar
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;