import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { 
  UserIcon, 
  EyeIcon, 
  EyeSlashIcon, 
  EnvelopeIcon, 
  AcademicCapIcon,
  CalendarIcon,
  DocumentTextIcon,
  CheckCircleIcon
} from '@heroicons/react/24/outline';

// 17 Carreras UCN Campus Guayacán
const CARRERAS_UCN = [
  'Biología Marina',
  'Ingeniería en Acuicultura',
  'Ingeniería en Prevención de Riesgos y Medioambiente', 
  'Medicina',
  'Enfermería',
  'Nutrición y Dietética',
  'Kinesiología',
  'Ingeniería Civil Industrial',
  'Ingeniería Civil en Computación e Informática',
  'Tecnologías de Información',
  'Ingeniería Comercial',
  'Contador Auditor Diurno',
  'Contador Auditor Vespertino',
  'Ingeniería en Información y Control de Gestión',
  'Derecho',
  'Periodismo',
  'Psicología'
];

interface UCNRegisterData {
  rut: string;
  email: string;
  nombre: string;
  apellidos: string;
  password: string;
  carrera: string;
  año_ingreso: number;
}

const Register: React.FC = () => {
  const navigate = useNavigate();
  const { register, loading: authLoading, error: authError, clearError, isAuthenticated } = useAuth();
  const [formData, setFormData] = useState<UCNRegisterData>({
    rut: '',
    email: '',
    nombre: '',
    apellidos: '',
    password: '',
    carrera: '',
    año_ingreso: new Date().getFullYear()
  });
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // Redirigir si ya está autenticado
  useEffect(() => {
    if (isAuthenticated) {
      navigate('/dashboard');
    }
  }, [isAuthenticated, navigate]);

  // Limpiar errores cuando se monta el componente
  useEffect(() => {
    clearError();
  }, [clearError]);

  const formatRUT = (rut: string) => {
    // Remover todo excepto números y K
    const cleanRut = rut.replace(/[^0-9kK]/g, '');
    if (cleanRut.length <= 1) return cleanRut;
    
    // Separar número y dígito verificador
    const number = cleanRut.slice(0, -1);
    const dv = cleanRut.slice(-1).toUpperCase();
    
    // Formatear con puntos y guión
    if (number.length <= 3) return cleanRut;
    
    const formatted = number.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
    return `${formatted}-${dv}`;
  };

  const validateRUT = (rut: string): boolean => {
    const cleanRut = rut.replace(/[.\s-]/g, '');
    if (!/^\d{7,8}[0-9kK]$/i.test(cleanRut)) return false;
    
    const number = cleanRut.slice(0, -1);
    const dv = cleanRut.slice(-1).toUpperCase();
    
    // Algoritmo de validación RUT chileno
    let sum = 0;
    let multiplier = 2;
    
    for (let i = number.length - 1; i >= 0; i--) {
      sum += parseInt(number[i]) * multiplier;
      multiplier = multiplier < 7 ? multiplier + 1 : 2;
    }
    
    const remainder = sum % 11;
    const expectedDV = remainder < 2 ? remainder.toString() : remainder === 10 ? 'K' : (11 - remainder).toString();
    
    return dv === expectedDV;
  };

  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};
    
    if (!formData.rut) {
      errors.rut = 'El RUT es requerido';
    } else if (!validateRUT(formData.rut)) {
      errors.rut = 'RUT inválido';
    }

    if (!formData.email) {
      errors.email = 'El email es requerido';
    } else if (!formData.email.endsWith('@alumnos.ucn.cl')) {
      errors.email = 'Debe usar un email @alumnos.ucn.cl';
    }

    if (!formData.nombre.trim()) {
      errors.nombre = 'El nombre es requerido';
    }

    if (!formData.apellidos.trim()) {
      errors.apellidos = 'Los apellidos son requeridos';
    }

    if (!formData.password) {
      errors.password = 'La contraseña es requerida';
    } else if (formData.password.length < 6) {
      errors.password = 'La contraseña debe tener al menos 6 caracteres';
    }

    if (!formData.carrera) {
      errors.carrera = 'Selecciona tu carrera';
    }

    if (formData.año_ingreso < 2018 || formData.año_ingreso > 2025) {
      errors.año_ingreso = 'Año de ingreso debe estar entre 2018 y 2025';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    let processedValue = value;
    
    // Formatear RUT mientras se escribe
    if (name === 'rut') {
      processedValue = formatRUT(value);
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: name === 'año_ingreso' ? parseInt(value) || new Date().getFullYear() : processedValue,
    }));

    // Limpiar error del campo cuando el usuario empiece a escribir
    if (formErrors[name]) {
      setFormErrors(prev => ({ ...prev, [name]: '' }));
    }
    
    clearError();
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      // Preparar datos para enviar al backend
      const registerPayload = {
        ...formData,
        rutLimpio: formData.rut.replace(/[.\s-]/g, ''),
        carreraValida: formData.carrera
      };

      await register(registerPayload);
      navigate('/dashboard');
    } catch (err: any) {
      console.error('Error en registro:', err);
      // El error ya se maneja en AuthContext
    } finally {
      setLoading(false);
    }
  };

  const isFormLoading = loading || authLoading;
  const errorMessage = authError;

  return (
    <div className="min-h-screen bg-ucn-gradient flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
      {/* Background decorative elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-white/10 rounded-full blur-3xl"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-white/10 rounded-full blur-3xl"></div>
      </div>

      <div className="max-w-2xl w-full space-y-8 relative z-10">
        {/* Header */}
        <div className="text-center">
          <div className="mx-auto h-20 w-20 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center mb-6">
            <UserIcon className="h-10 w-10 text-white" />
          </div>
          <h2 className="text-4xl font-display font-bold text-white mb-2">
            Registro UCN Community
          </h2>
          <p className="text-ucn-100 text-lg">
            Únete a la comunidad del Campus Guayacán
          </p>
        </div>

        {/* Register Form */}
        <div className="card bg-white/95 backdrop-blur-sm shadow-ucn-lg">
          <div className="card-body">
            <form onSubmit={handleSubmit} className="space-y-6">
              
              {/* RUT */}
              <div>
                <label htmlFor="rut" className="block text-sm font-semibold text-ucn-gray-700 mb-2">
                  RUT Chileno
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <DocumentTextIcon className="h-5 w-5 text-ucn-gray-400" />
                  </div>
                  <input
                    id="rut"
                    name="rut"
                    type="text"
                    required
                    className={`input pl-10 ${formErrors.rut ? 'input-error' : ''}`}
                    placeholder="12.345.678-K"
                    value={formData.rut}
                    onChange={handleChange}
                    disabled={isFormLoading}
                  />
                </div>
                {formErrors.rut && (
                  <p className="mt-2 text-sm text-red-600">{formErrors.rut}</p>
                )}
              </div>

              {/* Email */}
              <div>
                <label htmlFor="email" className="block text-sm font-semibold text-ucn-gray-700 mb-2">
                  Email Institucional @alumnos.ucn.cl
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <EnvelopeIcon className="h-5 w-5 text-ucn-gray-400" />
                  </div>
                  <input
                    id="email"
                    name="email"
                    type="email"
                    required
                    className={`input pl-10 ${formErrors.email ? 'input-error' : ''}`}
                    placeholder="nombre.apellido@alumnos.ucn.cl"
                    value={formData.email}
                    onChange={handleChange}
                    disabled={isFormLoading}
                  />
                </div>
                {formErrors.email && (
                  <p className="mt-2 text-sm text-red-600">{formErrors.email}</p>
                )}
              </div>

              {/* Nombre y Apellidos */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label htmlFor="nombre" className="block text-sm font-semibold text-ucn-gray-700 mb-2">
                    Nombre
                  </label>
                  <input
                    id="nombre"
                    name="nombre"
                    type="text"
                    required
                    className={`input ${formErrors.nombre ? 'input-error' : ''}`}
                    placeholder="Juan"
                    value={formData.nombre}
                    onChange={handleChange}
                    disabled={isFormLoading}
                  />
                  {formErrors.nombre && (
                    <p className="mt-2 text-sm text-red-600">{formErrors.nombre}</p>
                  )}
                </div>
                
                <div>
                  <label htmlFor="apellidos" className="block text-sm font-semibold text-ucn-gray-700 mb-2">
                    Apellidos
                  </label>
                  <input
                    id="apellidos"
                    name="apellidos"
                    type="text"
                    required
                    className={`input ${formErrors.apellidos ? 'input-error' : ''}`}
                    placeholder="Pérez González"
                    value={formData.apellidos}
                    onChange={handleChange}
                    disabled={isFormLoading}
                  />
                  {formErrors.apellidos && (
                    <p className="mt-2 text-sm text-red-600">{formErrors.apellidos}</p>
                  )}
                </div>
              </div>

              {/* Carrera */}
              <div>
                <label htmlFor="carrera" className="block text-sm font-semibold text-ucn-gray-700 mb-2">
                  Carrera UCN Campus Guayacán
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <AcademicCapIcon className="h-5 w-5 text-ucn-gray-400" />
                  </div>
                  <select
                    id="carrera"
                    name="carrera"
                    required
                    className={`input pl-10 ${formErrors.carrera ? 'input-error' : ''}`}
                    value={formData.carrera}
                    onChange={handleChange}
                    disabled={isFormLoading}
                  >
                    <option value="">Selecciona tu carrera</option>
                    {CARRERAS_UCN.map((carrera) => (
                      <option key={carrera} value={carrera}>
                        {carrera}
                      </option>
                    ))}
                  </select>
                </div>
                {formErrors.carrera && (
                  <p className="mt-2 text-sm text-red-600">{formErrors.carrera}</p>
                )}
              </div>

              {/* Año de Ingreso */}
              <div>
                <label htmlFor="año_ingreso" className="block text-sm font-semibold text-ucn-gray-700 mb-2">
                  Año de Ingreso
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <CalendarIcon className="h-5 w-5 text-ucn-gray-400" />
                  </div>
                  <select
                    id="año_ingreso"
                    name="año_ingreso"
                    required
                    className={`input pl-10 ${formErrors.año_ingreso ? 'input-error' : ''}`}
                    value={formData.año_ingreso}
                    onChange={handleChange}
                    disabled={isFormLoading}
                  >
                    {[2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025].map((year) => (
                      <option key={year} value={year}>
                        {year}
                      </option>
                    ))}
                  </select>
                </div>
                {formErrors.año_ingreso && (
                  <p className="mt-2 text-sm text-red-600">{formErrors.año_ingreso}</p>
                )}
              </div>

              {/* Password */}
              <div>
                <label htmlFor="password" className="block text-sm font-semibold text-ucn-gray-700 mb-2">
                  Contraseña
                </label>
                <div className="relative">
                  <input
                    id="password"
                    name="password"
                    type={showPassword ? 'text' : 'password'}
                    required
                    className={`input pr-10 ${formErrors.password ? 'input-error' : ''}`}
                    placeholder="Mínimo 6 caracteres"
                    value={formData.password}
                    onChange={handleChange}
                    disabled={isFormLoading}
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 pr-3 flex items-center"
                    onClick={() => setShowPassword(!showPassword)}
                    disabled={isFormLoading}
                  >
                    {showPassword ? (
                      <EyeSlashIcon className="h-5 w-5 text-ucn-gray-400 hover:text-ucn-gray-600" />
                    ) : (
                      <EyeIcon className="h-5 w-5 text-ucn-gray-400 hover:text-ucn-gray-600" />
                    )}
                  </button>
                </div>
                {formErrors.password && (
                  <p className="mt-2 text-sm text-red-600">{formErrors.password}</p>
                )}
              </div>

              {/* Error Message */}
              {errorMessage && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 animate-fadeIn">
                  <div className="flex">
                    <div className="ml-3">
                      <h3 className="text-sm font-medium text-red-800">
                        Error en el registro
                      </h3>
                      <div className="mt-1 text-sm text-red-700">
                        {errorMessage}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Submit Button */}
              <button
                type="submit"
                disabled={isFormLoading}
                className="btn-primary w-full py-3 text-lg font-semibold relative overflow-hidden"
              >
                {isFormLoading ? (
                  <div className="flex items-center justify-center">
                    <div className="spinner w-5 h-5 mr-3"></div>
                    Registrando...
                  </div>
                ) : (
                  <div className="flex items-center justify-center">
                    <CheckCircleIcon className="h-5 w-5 mr-2" />
                    Registrarse en UCN Community
                  </div>
                )}
              </button>

              {/* Login Link */}
              <div className="text-center pt-4 border-t border-ucn-gray-200">
                <p className="text-sm text-ucn-gray-600">
                  ¿Ya tienes cuenta?{' '}
                  <Link 
                    to="/login" 
                    className="font-semibold text-ucn-600 hover:text-ucn-700 hover:underline"
                  >
                    Inicia sesión aquí
                  </Link>
                </p>
                <p className="text-xs text-ucn-gray-500 mt-2">
                  Solo para estudiantes UCN Campus Guayacán
                </p>
              </div>
            </form>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center">
          <p className="text-sm text-white/80">
            Universidad Católica del Norte © 2024
          </p>
          <p className="text-xs text-white/60 mt-1">
            Campus Guayacán - Larrondo 1281, Coquimbo
          </p>
        </div>
      </div>
    </div>
  );
};

export default Register;