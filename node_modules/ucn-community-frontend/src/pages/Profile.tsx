import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { userAPI, postAPI, handleApiError } from '../services/api';
import { VALID_CARRERAS, VALID_CAMPUS } from '../types';
import {
  PencilIcon,
  CameraIcon,
  MapPinIcon,
  CalendarIcon,
  AcademicCapIcon,
  UserIcon,
  DocumentTextIcon,
  HeartIcon,
  ChatBubbleLeftIcon,
  CheckCircleIcon,
  XCircleIcon
} from '@heroicons/react/24/outline';
import { HeartIcon as HeartSolid } from '@heroicons/react/24/solid';

interface UserProfile {
  id: string;
  name: string;
  email: string;
  carrera: string;
  año_ingreso: number;
  campus: string;
  biografia?: string;
  foto_perfil?: string;
  role: string;
  verificado: boolean;
  fecha_registro: Date;
  last_login?: Date;
}

interface UserPost {
  _id: string;
  titulo: string;
  contenido: string;
  categoria: string;
  likes: string[];
  comentarios: any[];
  fecha_creacion: Date;
}

const Profile: React.FC = () => {
  const { userId } = useParams();
  const { user: currentUser, updateUser } = useAuth();
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [posts, setPosts] = useState<UserPost[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editForm, setEditForm] = useState({
    name: '',
    carrera: '',
    año_ingreso: new Date().getFullYear(),
    campus: '',
    biografia: ''
  });
  const [saving, setSaving] = useState(false);

  const isOwnProfile = !userId || userId === currentUser?.id;

  useEffect(() => {
    const loadProfile = async () => {
      try {
        setLoading(true);
        
        if (isOwnProfile && currentUser) {
          // Load own profile
          const [profileResponse, postsResponse] = await Promise.all([
            userAPI.getUserById(currentUser.id),
            postAPI.getMyPosts()
          ]);

          if (profileResponse.success && profileResponse.data) {
            setProfile(profileResponse.data.user);
            setEditForm({
              name: profileResponse.data.user.name,
              carrera: profileResponse.data.user.carrera,
              año_ingreso: profileResponse.data.user.año_ingreso,
              campus: profileResponse.data.user.campus,
              biografia: profileResponse.data.user.biografia || ''
            });
          }

          if (postsResponse.success && postsResponse.data) {
            setPosts(postsResponse.data.posts || []);
          }
        } else if (userId) {
          // Load other user's profile
          const [profileResponse, postsResponse] = await Promise.all([
            userAPI.getUserById(userId),
            postAPI.getPosts({ limit: 20 }) // Filter by user in real implementation
          ]);

          if (profileResponse.success && profileResponse.data) {
            setProfile(profileResponse.data.user);
          }

          if (postsResponse.success && postsResponse.data) {
            // Filter posts by this user (in real implementation, this would be done server-side)
            const userPosts = postsResponse.data.posts.filter((post: any) => post.autor._id === userId);
            setPosts(userPosts || []);
          }
        }

      } catch (err) {
        setError(handleApiError(err));
      } finally {
        setLoading(false);
      }
    };

    loadProfile();
  }, [userId, currentUser, isOwnProfile]);

  const handleSaveProfile = async () => {
    try {
      setSaving(true);
      const response = await userAPI.updateProfile(editForm);
      
      if (response.success && response.data) {
        setProfile(response.data.user);
        updateUser(response.data.user);
        setIsEditing(false);
      }
    } catch (err) {
      setError(handleApiError(err));
    } finally {
      setSaving(false);
    }
  };

  const handleAvatarUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      const formData = new FormData();
      formData.append('avatar', file);
      
      const response = await userAPI.uploadAvatar(formData);
      if (response.success && response.data) {
        setProfile(prev => prev ? { ...prev, foto_perfil: response.data?.user.foto_perfil } : null);
        updateUser({ foto_perfil: response.data?.user.foto_perfil });
      }
    } catch (err) {
      setError(handleApiError(err));
    }
  };

  const getAvatarInitials = (name: string) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  };

  const formatTimeAgo = (date: Date) => {
    const now = new Date();
    const diffMs = now.getTime() - new Date(date).getTime();
    const diffDays = Math.floor(diffMs / 86400000);
    
    if (diffDays === 0) return 'Hoy';
    if (diffDays === 1) return 'Ayer';
    if (diffDays < 7) return `${diffDays} días`;
    return new Date(date).toLocaleDateString();
  };

  const calculateYears = (startYear: number) => {
    const currentYear = new Date().getFullYear();
    return currentYear - startYear + 1;
  };

  if (loading) {
    return (
      <div className="flex-1 flex items-center justify-center">
        <div className="text-center">
          <div className="spinner w-8 h-8 mx-auto mb-4"></div>
          <p className="text-ucn-gray-600">Cargando perfil...</p>
        </div>
      </div>
    );
  }

  if (error || !profile) {
    return (
      <div className="max-w-2xl mx-auto px-4 py-8">
        <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
          <XCircleIcon className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-red-800 mb-2">Error al cargar perfil</h3>
          <p className="text-red-700">{error || 'No se pudo cargar el perfil'}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      {/* Profile Header */}
      <div className="card mb-8">
        <div className="card-body">
          <div className="flex flex-col sm:flex-row items-start sm:items-center space-y-4 sm:space-y-0 sm:space-x-6">
            {/* Avatar */}
            <div className="relative">
              {profile.foto_perfil ? (
                <img
                  className="w-24 h-24 rounded-full object-cover"
                  src={profile.foto_perfil}
                  alt={profile.name}
                />
              ) : (
                <div className="w-24 h-24 bg-ucn-gradient rounded-full flex items-center justify-center text-white text-2xl font-bold">
                  {getAvatarInitials(profile.name)}
                </div>
              )}
              
              {isOwnProfile && (
                <label className="absolute -bottom-1 -right-1 bg-white rounded-full p-2 shadow-lg cursor-pointer hover:bg-ucn-gray-50 transition-colors">
                  <CameraIcon className="h-4 w-4 text-ucn-gray-600" />
                  <input
                    type="file"
                    accept="image/*"
                    className="hidden"
                    onChange={handleAvatarUpload}
                  />
                </label>
              )}
            </div>

            {/* Profile Info */}
            <div className="flex-1">
              {isEditing ? (
                <div className="space-y-4">
                  <input
                    type="text"
                    value={editForm.name}
                    onChange={(e) => setEditForm({...editForm, name: e.target.value})}
                    className="input text-xl font-bold"
                    placeholder="Nombre completo"
                  />
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <select
                      value={editForm.carrera}
                      onChange={(e) => setEditForm({...editForm, carrera: e.target.value})}
                      className="input"
                    >
                      <option value="">Seleccionar carrera</option>
                      {VALID_CARRERAS.map(carrera => (
                        <option key={carrera} value={carrera}>{carrera}</option>
                      ))}
                    </select>
                    <select
                      value={editForm.campus}
                      onChange={(e) => setEditForm({...editForm, campus: e.target.value})}
                      className="input"
                    >
                      <option value="">Seleccionar campus</option>
                      {VALID_CAMPUS.map(campus => (
                        <option key={campus} value={campus}>{campus}</option>
                      ))}
                    </select>
                  </div>
                  <textarea
                    value={editForm.biografia}
                    onChange={(e) => setEditForm({...editForm, biografia: e.target.value})}
                    className="input resize-none"
                    rows={3}
                    placeholder="Biografía (opcional)"
                    maxLength={500}
                  />
                  <div className="flex space-x-3">
                    <button
                      onClick={handleSaveProfile}
                      disabled={saving}
                      className="btn-primary"
                    >
                      {saving ? 'Guardando...' : 'Guardar'}
                    </button>
                    <button
                      onClick={() => setIsEditing(false)}
                      className="btn-secondary"
                    >
                      Cancelar
                    </button>
                  </div>
                </div>
              ) : (
                <div>
                  <div className="flex items-center space-x-3 mb-2">
                    <h1 className="text-2xl font-bold text-ucn-gray-900">{profile.name}</h1>
                    {profile.verificado && (
                      <CheckCircleIcon className="h-6 w-6 text-green-500" title="Cuenta verificada" />
                    )}
                  </div>
                  
                  <div className="flex flex-wrap items-center gap-4 text-sm text-ucn-gray-600 mb-4">
                    <div className="flex items-center">
                      <AcademicCapIcon className="h-4 w-4 mr-1" />
                      {profile.carrera}
                    </div>
                    <div className="flex items-center">
                      <MapPinIcon className="h-4 w-4 mr-1" />
                      {profile.campus}
                    </div>
                    <div className="flex items-center">
                      <CalendarIcon className="h-4 w-4 mr-1" />
                      {calculateYears(profile.año_ingreso)}° año
                    </div>
                    <div className="flex items-center">
                      <UserIcon className="h-4 w-4 mr-1" />
                      {profile.role === 'student' ? 'Estudiante' : 'Profesor'}
                    </div>
                  </div>

                  {profile.biografia && (
                    <p className="text-ucn-gray-700 mb-4">{profile.biografia}</p>
                  )}

                  <div className="flex items-center justify-between">
                    <div className="text-sm text-ucn-gray-500">
                      Miembro desde {formatTimeAgo(profile.fecha_registro)}
                      {profile.last_login && (
                        <span className="ml-4">
                          Última conexión: {formatTimeAgo(profile.last_login)}
                        </span>
                      )}
                    </div>

                    {isOwnProfile && (
                      <button
                        onClick={() => setIsEditing(true)}
                        className="btn-outline flex items-center"
                      >
                        <PencilIcon className="h-4 w-4 mr-2" />
                        Editar perfil
                      </button>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Profile Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="card text-center">
          <div className="card-body">
            <div className="text-2xl font-bold text-ucn-600">{posts.length}</div>
            <div className="text-sm text-ucn-gray-600">Publicaciones</div>
          </div>
        </div>
        
        <div className="card text-center">
          <div className="card-body">
            <div className="text-2xl font-bold text-ucn-600">
              {posts.reduce((total, post) => total + post.likes.length, 0)}
            </div>
            <div className="text-sm text-ucn-gray-600">Likes recibidos</div>
          </div>
        </div>
        
        <div className="card text-center">
          <div className="card-body">
            <div className="text-2xl font-bold text-ucn-600">
              {posts.reduce((total, post) => total + post.comentarios.length, 0)}
            </div>
            <div className="text-sm text-ucn-gray-600">Comentarios</div>
          </div>
        </div>
      </div>

      {/* User Posts */}
      <div>
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold text-ucn-gray-900">
            {isOwnProfile ? 'Mis publicaciones' : `Publicaciones de ${profile.name.split(' ')[0]}`}
          </h2>
          <span className="text-sm text-ucn-gray-500">{posts.length} publicaciones</span>
        </div>

        {posts.length > 0 ? (
          <div className="space-y-6">
            {posts.map((post) => (
              <article key={post._id} className="card hover-lift">
                <div className="card-body">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-2 text-sm text-ucn-gray-500">
                      <span className="badge-primary">{post.categoria}</span>
                      <span>•</span>
                      <span>{formatTimeAgo(post.fecha_creacion)}</span>
                    </div>
                  </div>

                  <h3 className="text-lg font-semibold text-ucn-gray-900 mb-2">
                    {post.titulo}
                  </h3>
                  
                  <p className="text-ucn-gray-700 leading-relaxed mb-4">
                    {post.contenido}
                  </p>

                  <div className="flex items-center space-x-6 pt-4 border-t border-ucn-gray-100">
                    <div className="flex items-center space-x-2 text-ucn-gray-600">
                      <HeartIcon className="h-5 w-5" />
                      <span className="text-sm">{post.likes.length}</span>
                    </div>
                    
                    <div className="flex items-center space-x-2 text-ucn-gray-600">
                      <ChatBubbleLeftIcon className="h-5 w-5" />
                      <span className="text-sm">{post.comentarios.length}</span>
                    </div>
                  </div>
                </div>
              </article>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-ucn-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <DocumentTextIcon className="h-8 w-8 text-ucn-gray-400" />
            </div>
            <h3 className="text-lg font-medium text-ucn-gray-900 mb-2">
              {isOwnProfile ? 'No has publicado nada aún' : 'No hay publicaciones'}
            </h3>
            <p className="text-ucn-gray-600">
              {isOwnProfile ? 'Crea tu primera publicación y compártela con la comunidad' : 'Este usuario no ha publicado nada todavía'}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Profile;